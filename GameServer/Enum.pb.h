// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum PlayerSkin : int {
  PLAYER_TYPE_STEVE = 0,
  PLAYER_TYPE_PRIDE = 1,
  PLAYER_TYPE_ESHE = 2,
  PLAYER_TYPE_COPPER = 3,
  PlayerSkin_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerSkin_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerSkin_IsValid(int value);
constexpr PlayerSkin PlayerSkin_MIN = PLAYER_TYPE_STEVE;
constexpr PlayerSkin PlayerSkin_MAX = PLAYER_TYPE_COPPER;
constexpr int PlayerSkin_ARRAYSIZE = PlayerSkin_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerSkin_descriptor();
template<typename T>
inline const std::string& PlayerSkin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerSkin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerSkin_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerSkin_descriptor(), enum_t_value);
}
inline bool PlayerSkin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerSkin* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerSkin>(
    PlayerSkin_descriptor(), name, value);
}
enum EquipType : int {
  MELEE = 0,
  RANGE = 1,
  LEGACY = 2,
  EquipType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EquipType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EquipType_IsValid(int value);
constexpr EquipType EquipType_MIN = MELEE;
constexpr EquipType EquipType_MAX = LEGACY;
constexpr int EquipType_ARRAYSIZE = EquipType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EquipType_descriptor();
template<typename T>
inline const std::string& EquipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EquipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EquipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EquipType_descriptor(), enum_t_value);
}
inline bool EquipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EquipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EquipType>(
    EquipType_descriptor(), name, value);
}
enum SatonPattern : int {
  MoveTo = 0,
  HAMMER = 1,
  GRAB = 2,
  BIRD = 3,
  SYMBOL = 4,
  FASCINATE = 5,
  DRAWMOON = 6,
  SatonPattern_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SatonPattern_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SatonPattern_IsValid(int value);
constexpr SatonPattern SatonPattern_MIN = MoveTo;
constexpr SatonPattern SatonPattern_MAX = DRAWMOON;
constexpr int SatonPattern_ARRAYSIZE = SatonPattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatonPattern_descriptor();
template<typename T>
inline const std::string& SatonPattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SatonPattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SatonPattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SatonPattern_descriptor(), enum_t_value);
}
inline bool SatonPattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SatonPattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SatonPattern>(
    SatonPattern_descriptor(), name, value);
}
enum KoukuPattern : int {
  KOUKU_MoveTo = 0,
  KOUKU_SYMBOL_ON = 1,
  KOUKU_SYMBOL_OFF = 2,
  KOUKU_HAMMER = 3,
  KOUKU_HORROR = 4,
  KOUKU_BASIC = 5,
  KoukuPattern_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KoukuPattern_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KoukuPattern_IsValid(int value);
constexpr KoukuPattern KoukuPattern_MIN = KOUKU_MoveTo;
constexpr KoukuPattern KoukuPattern_MAX = KOUKU_BASIC;
constexpr int KoukuPattern_ARRAYSIZE = KoukuPattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KoukuPattern_descriptor();
template<typename T>
inline const std::string& KoukuPattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KoukuPattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KoukuPattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KoukuPattern_descriptor(), enum_t_value);
}
inline bool KoukuPattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KoukuPattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KoukuPattern>(
    KoukuPattern_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::PlayerSkin> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PlayerSkin>() {
  return ::Protocol::PlayerSkin_descriptor();
}
template <> struct is_proto_enum< ::Protocol::EquipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::EquipType>() {
  return ::Protocol::EquipType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SatonPattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SatonPattern>() {
  return ::Protocol::SatonPattern_descriptor();
}
template <> struct is_proto_enum< ::Protocol::KoukuPattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::KoukuPattern>() {
  return ::Protocol::KoukuPattern_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
