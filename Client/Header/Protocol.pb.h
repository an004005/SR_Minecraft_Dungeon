// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MONSTER_SET_TARGET;
struct C_MONSTER_SET_TARGETDefaultTypeInternal;
extern C_MONSTER_SET_TARGETDefaultTypeInternal _C_MONSTER_SET_TARGET_default_instance_;
class C_MONSTER_WORLD;
struct C_MONSTER_WORLDDefaultTypeInternal;
extern C_MONSTER_WORLDDefaultTypeInternal _C_MONSTER_WORLD_default_instance_;
class C_PLAYER_ACTION;
struct C_PLAYER_ACTIONDefaultTypeInternal;
extern C_PLAYER_ACTIONDefaultTypeInternal _C_PLAYER_ACTION_default_instance_;
class C_PLAYER_ARROW;
struct C_PLAYER_ARROWDefaultTypeInternal;
extern C_PLAYER_ARROWDefaultTypeInternal _C_PLAYER_ARROW_default_instance_;
class C_PLAYER_EQUIP;
struct C_PLAYER_EQUIPDefaultTypeInternal;
extern C_PLAYER_EQUIPDefaultTypeInternal _C_PLAYER_EQUIP_default_instance_;
class C_PLAYER_INPUT;
struct C_PLAYER_INPUTDefaultTypeInternal;
extern C_PLAYER_INPUTDefaultTypeInternal _C_PLAYER_INPUT_default_instance_;
class C_PLAYER_WORLD;
struct C_PLAYER_WORLDDefaultTypeInternal;
extern C_PLAYER_WORLDDefaultTypeInternal _C_PLAYER_WORLD_default_instance_;
class C_PLAYER_YAW_ACTION;
struct C_PLAYER_YAW_ACTIONDefaultTypeInternal;
extern C_PLAYER_YAW_ACTIONDefaultTypeInternal _C_PLAYER_YAW_ACTION_default_instance_;
class C_SPAWN_MONSTER;
struct C_SPAWN_MONSTERDefaultTypeInternal;
extern C_SPAWN_MONSTERDefaultTypeInternal _C_SPAWN_MONSTER_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MONSTER_SET_TARGET;
struct S_MONSTER_SET_TARGETDefaultTypeInternal;
extern S_MONSTER_SET_TARGETDefaultTypeInternal _S_MONSTER_SET_TARGET_default_instance_;
class S_MONSTER_WORLD;
struct S_MONSTER_WORLDDefaultTypeInternal;
extern S_MONSTER_WORLDDefaultTypeInternal _S_MONSTER_WORLD_default_instance_;
class S_OTHER_PLAYER;
struct S_OTHER_PLAYERDefaultTypeInternal;
extern S_OTHER_PLAYERDefaultTypeInternal _S_OTHER_PLAYER_default_instance_;
class S_PLAYER_ACTION;
struct S_PLAYER_ACTIONDefaultTypeInternal;
extern S_PLAYER_ACTIONDefaultTypeInternal _S_PLAYER_ACTION_default_instance_;
class S_PLAYER_ARROW;
struct S_PLAYER_ARROWDefaultTypeInternal;
extern S_PLAYER_ARROWDefaultTypeInternal _S_PLAYER_ARROW_default_instance_;
class S_PLAYER_EQUIP;
struct S_PLAYER_EQUIPDefaultTypeInternal;
extern S_PLAYER_EQUIPDefaultTypeInternal _S_PLAYER_EQUIP_default_instance_;
class S_PLAYER_INPUT;
struct S_PLAYER_INPUTDefaultTypeInternal;
extern S_PLAYER_INPUTDefaultTypeInternal _S_PLAYER_INPUT_default_instance_;
class S_PLAYER_WORLD;
struct S_PLAYER_WORLDDefaultTypeInternal;
extern S_PLAYER_WORLDDefaultTypeInternal _S_PLAYER_WORLD_default_instance_;
class S_PLAYER_YAW_ACTION;
struct S_PLAYER_YAW_ACTIONDefaultTypeInternal;
extern S_PLAYER_YAW_ACTIONDefaultTypeInternal _S_PLAYER_YAW_ACTION_default_instance_;
class S_SPAWN_MONSTER;
struct S_SPAWN_MONSTERDefaultTypeInternal;
extern S_SPAWN_MONSTERDefaultTypeInternal _S_SPAWN_MONSTER_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MONSTER_SET_TARGET* Arena::CreateMaybeMessage<::Protocol::C_MONSTER_SET_TARGET>(Arena*);
template<> ::Protocol::C_MONSTER_WORLD* Arena::CreateMaybeMessage<::Protocol::C_MONSTER_WORLD>(Arena*);
template<> ::Protocol::C_PLAYER_ACTION* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_ACTION>(Arena*);
template<> ::Protocol::C_PLAYER_ARROW* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_ARROW>(Arena*);
template<> ::Protocol::C_PLAYER_EQUIP* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_EQUIP>(Arena*);
template<> ::Protocol::C_PLAYER_INPUT* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_INPUT>(Arena*);
template<> ::Protocol::C_PLAYER_WORLD* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_WORLD>(Arena*);
template<> ::Protocol::C_PLAYER_YAW_ACTION* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_YAW_ACTION>(Arena*);
template<> ::Protocol::C_SPAWN_MONSTER* Arena::CreateMaybeMessage<::Protocol::C_SPAWN_MONSTER>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MONSTER_SET_TARGET* Arena::CreateMaybeMessage<::Protocol::S_MONSTER_SET_TARGET>(Arena*);
template<> ::Protocol::S_MONSTER_WORLD* Arena::CreateMaybeMessage<::Protocol::S_MONSTER_WORLD>(Arena*);
template<> ::Protocol::S_OTHER_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_OTHER_PLAYER>(Arena*);
template<> ::Protocol::S_PLAYER_ACTION* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_ACTION>(Arena*);
template<> ::Protocol::S_PLAYER_ARROW* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_ARROW>(Arena*);
template<> ::Protocol::S_PLAYER_EQUIP* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_EQUIP>(Arena*);
template<> ::Protocol::S_PLAYER_INPUT* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_INPUT>(Arena*);
template<> ::Protocol::S_PLAYER_WORLD* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_WORLD>(Arena*);
template<> ::Protocol::S_PLAYER_YAW_ACTION* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_YAW_ACTION>(Arena*);
template<> ::Protocol::S_SPAWN_MONSTER* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_MONSTER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_GAME& from) {
    C_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kPlayerSkinFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.PlayerSkin playerSkin = 2;
  void clear_playerskin();
  ::Protocol::PlayerSkin playerskin() const;
  void set_playerskin(::Protocol::PlayerSkin value);
  private:
  ::Protocol::PlayerSkin _internal_playerskin() const;
  void _internal_set_playerskin(::Protocol::PlayerSkin value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    int playerskin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kPlayerSkinFieldNumber = 3,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.PlayerSkin playerSkin = 3;
  void clear_playerskin();
  ::Protocol::PlayerSkin playerskin() const;
  void set_playerskin(::Protocol::PlayerSkin value);
  private:
  ::Protocol::PlayerSkin _internal_playerskin() const;
  void _internal_set_playerskin(::Protocol::PlayerSkin value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    bool success_;
    int playerskin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OTHER_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OTHER_PLAYER) */ {
 public:
  inline S_OTHER_PLAYER() : S_OTHER_PLAYER(nullptr) {}
  ~S_OTHER_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_OTHER_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OTHER_PLAYER(const S_OTHER_PLAYER& from);
  S_OTHER_PLAYER(S_OTHER_PLAYER&& from) noexcept
    : S_OTHER_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_OTHER_PLAYER& operator=(const S_OTHER_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OTHER_PLAYER& operator=(S_OTHER_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OTHER_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OTHER_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_OTHER_PLAYER*>(
               &_S_OTHER_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_OTHER_PLAYER& a, S_OTHER_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OTHER_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OTHER_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OTHER_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OTHER_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OTHER_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OTHER_PLAYER& from) {
    S_OTHER_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OTHER_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OTHER_PLAYER";
  }
  protected:
  explicit S_OTHER_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kPlayerSkinFieldNumber = 2,
  };
  // repeated .Protocol.Player player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::Protocol::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_player();
  private:
  const ::Protocol::Player& _internal_player(int index) const;
  ::Protocol::Player* _internal_add_player();
  public:
  const ::Protocol::Player& player(int index) const;
  ::Protocol::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      player() const;

  // repeated .Protocol.PlayerSkin playerSkin = 2;
  int playerskin_size() const;
  private:
  int _internal_playerskin_size() const;
  public:
  void clear_playerskin();
  private:
  ::Protocol::PlayerSkin _internal_playerskin(int index) const;
  void _internal_add_playerskin(::Protocol::PlayerSkin value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_playerskin();
  public:
  ::Protocol::PlayerSkin playerskin(int index) const;
  void set_playerskin(int index, ::Protocol::PlayerSkin value);
  void add_playerskin(::Protocol::PlayerSkin value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& playerskin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_playerskin();

  // @@protoc_insertion_point(class_scope:Protocol.S_OTHER_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > player_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> playerskin_;
    mutable std::atomic<int> _playerskin_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_INPUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_INPUT) */ {
 public:
  inline C_PLAYER_INPUT() : C_PLAYER_INPUT(nullptr) {}
  ~C_PLAYER_INPUT() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_INPUT(const C_PLAYER_INPUT& from);
  C_PLAYER_INPUT(C_PLAYER_INPUT&& from) noexcept
    : C_PLAYER_INPUT() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_INPUT& operator=(const C_PLAYER_INPUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_INPUT& operator=(C_PLAYER_INPUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_INPUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_INPUT* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_INPUT*>(
               &_C_PLAYER_INPUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_PLAYER_INPUT& a, C_PLAYER_INPUT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_INPUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_INPUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_INPUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_INPUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_INPUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_INPUT& from) {
    C_PLAYER_INPUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_INPUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_INPUT";
  }
  protected:
  explicit C_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kInputBitFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // uint32 inputBit = 2;
  void clear_inputbit();
  uint32_t inputbit() const;
  void set_inputbit(uint32_t value);
  private:
  uint32_t _internal_inputbit() const;
  void _internal_set_inputbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_INPUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    uint32_t inputbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_INPUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_INPUT) */ {
 public:
  inline S_PLAYER_INPUT() : S_PLAYER_INPUT(nullptr) {}
  ~S_PLAYER_INPUT() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_INPUT(const S_PLAYER_INPUT& from);
  S_PLAYER_INPUT(S_PLAYER_INPUT&& from) noexcept
    : S_PLAYER_INPUT() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_INPUT& operator=(const S_PLAYER_INPUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_INPUT& operator=(S_PLAYER_INPUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_INPUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_INPUT* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_INPUT*>(
               &_S_PLAYER_INPUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_PLAYER_INPUT& a, S_PLAYER_INPUT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_INPUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_INPUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_INPUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_INPUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_INPUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_INPUT& from) {
    S_PLAYER_INPUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_INPUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_INPUT";
  }
  protected:
  explicit S_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kInputBitFieldNumber = 3,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 inputBit = 3;
  void clear_inputbit();
  uint32_t inputbit() const;
  void set_inputbit(uint32_t value);
  private:
  uint32_t _internal_inputbit() const;
  void _internal_set_inputbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_INPUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    bool success_;
    uint32_t inputbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_WORLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_WORLD) */ {
 public:
  inline C_PLAYER_WORLD() : C_PLAYER_WORLD(nullptr) {}
  ~C_PLAYER_WORLD() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_WORLD(const C_PLAYER_WORLD& from);
  C_PLAYER_WORLD(C_PLAYER_WORLD&& from) noexcept
    : C_PLAYER_WORLD() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_WORLD& operator=(const C_PLAYER_WORLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_WORLD& operator=(C_PLAYER_WORLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_WORLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_WORLD* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_WORLD*>(
               &_C_PLAYER_WORLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_PLAYER_WORLD& a, C_PLAYER_WORLD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_WORLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_WORLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_WORLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_WORLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_WORLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_WORLD& from) {
    C_PLAYER_WORLD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_WORLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_WORLD";
  }
  protected:
  explicit C_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kMatWorldFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.Matrix matWorld = 2;
  bool has_matworld() const;
  private:
  bool _internal_has_matworld() const;
  public:
  void clear_matworld();
  const ::Protocol::Matrix& matworld() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matworld();
  ::Protocol::Matrix* mutable_matworld();
  void set_allocated_matworld(::Protocol::Matrix* matworld);
  private:
  const ::Protocol::Matrix& _internal_matworld() const;
  ::Protocol::Matrix* _internal_mutable_matworld();
  public:
  void unsafe_arena_set_allocated_matworld(
      ::Protocol::Matrix* matworld);
  ::Protocol::Matrix* unsafe_arena_release_matworld();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_WORLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::Matrix* matworld_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_WORLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_WORLD) */ {
 public:
  inline S_PLAYER_WORLD() : S_PLAYER_WORLD(nullptr) {}
  ~S_PLAYER_WORLD() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_WORLD(const S_PLAYER_WORLD& from);
  S_PLAYER_WORLD(S_PLAYER_WORLD&& from) noexcept
    : S_PLAYER_WORLD() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_WORLD& operator=(const S_PLAYER_WORLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_WORLD& operator=(S_PLAYER_WORLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_WORLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_WORLD* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_WORLD*>(
               &_S_PLAYER_WORLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_PLAYER_WORLD& a, S_PLAYER_WORLD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_WORLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_WORLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_WORLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_WORLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_WORLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_WORLD& from) {
    S_PLAYER_WORLD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_WORLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_WORLD";
  }
  protected:
  explicit S_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kMatWorldFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.Matrix matWorld = 3;
  bool has_matworld() const;
  private:
  bool _internal_has_matworld() const;
  public:
  void clear_matworld();
  const ::Protocol::Matrix& matworld() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matworld();
  ::Protocol::Matrix* mutable_matworld();
  void set_allocated_matworld(::Protocol::Matrix* matworld);
  private:
  const ::Protocol::Matrix& _internal_matworld() const;
  ::Protocol::Matrix* _internal_mutable_matworld();
  public:
  void unsafe_arena_set_allocated_matworld(
      ::Protocol::Matrix* matworld);
  ::Protocol::Matrix* unsafe_arena_release_matworld();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_WORLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::Matrix* matworld_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_YAW_ACTION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_YAW_ACTION) */ {
 public:
  inline C_PLAYER_YAW_ACTION() : C_PLAYER_YAW_ACTION(nullptr) {}
  ~C_PLAYER_YAW_ACTION() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_YAW_ACTION(const C_PLAYER_YAW_ACTION& from);
  C_PLAYER_YAW_ACTION(C_PLAYER_YAW_ACTION&& from) noexcept
    : C_PLAYER_YAW_ACTION() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_YAW_ACTION& operator=(const C_PLAYER_YAW_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_YAW_ACTION& operator=(C_PLAYER_YAW_ACTION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_YAW_ACTION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_YAW_ACTION* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_YAW_ACTION*>(
               &_C_PLAYER_YAW_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_PLAYER_YAW_ACTION& a, C_PLAYER_YAW_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_YAW_ACTION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_YAW_ACTION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_YAW_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_YAW_ACTION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_YAW_ACTION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_YAW_ACTION& from) {
    C_PLAYER_YAW_ACTION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_YAW_ACTION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_YAW_ACTION";
  }
  protected:
  explicit C_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kYawFieldNumber = 2,
    kActionBitFieldNumber = 3,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // uint32 actionBit = 3;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_YAW_ACTION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    float yaw_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_YAW_ACTION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_YAW_ACTION) */ {
 public:
  inline S_PLAYER_YAW_ACTION() : S_PLAYER_YAW_ACTION(nullptr) {}
  ~S_PLAYER_YAW_ACTION() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_YAW_ACTION(const S_PLAYER_YAW_ACTION& from);
  S_PLAYER_YAW_ACTION(S_PLAYER_YAW_ACTION&& from) noexcept
    : S_PLAYER_YAW_ACTION() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_YAW_ACTION& operator=(const S_PLAYER_YAW_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_YAW_ACTION& operator=(S_PLAYER_YAW_ACTION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_YAW_ACTION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_YAW_ACTION* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_YAW_ACTION*>(
               &_S_PLAYER_YAW_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_PLAYER_YAW_ACTION& a, S_PLAYER_YAW_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_YAW_ACTION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_YAW_ACTION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_YAW_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_YAW_ACTION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_YAW_ACTION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_YAW_ACTION& from) {
    S_PLAYER_YAW_ACTION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_YAW_ACTION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_YAW_ACTION";
  }
  protected:
  explicit S_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kYawFieldNumber = 3,
    kActionBitFieldNumber = 4,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // uint32 actionBit = 4;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_YAW_ACTION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    bool success_;
    float yaw_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_ACTION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_ACTION) */ {
 public:
  inline C_PLAYER_ACTION() : C_PLAYER_ACTION(nullptr) {}
  ~C_PLAYER_ACTION() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_ACTION(const C_PLAYER_ACTION& from);
  C_PLAYER_ACTION(C_PLAYER_ACTION&& from) noexcept
    : C_PLAYER_ACTION() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_ACTION& operator=(const C_PLAYER_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_ACTION& operator=(C_PLAYER_ACTION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_ACTION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_ACTION* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_ACTION*>(
               &_C_PLAYER_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_PLAYER_ACTION& a, C_PLAYER_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_ACTION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_ACTION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_ACTION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_ACTION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_ACTION& from) {
    C_PLAYER_ACTION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_ACTION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_ACTION";
  }
  protected:
  explicit C_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kActionBitFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // uint32 actionBit = 2;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_ACTION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_ACTION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_ACTION) */ {
 public:
  inline S_PLAYER_ACTION() : S_PLAYER_ACTION(nullptr) {}
  ~S_PLAYER_ACTION() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_ACTION(const S_PLAYER_ACTION& from);
  S_PLAYER_ACTION(S_PLAYER_ACTION&& from) noexcept
    : S_PLAYER_ACTION() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_ACTION& operator=(const S_PLAYER_ACTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_ACTION& operator=(S_PLAYER_ACTION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_ACTION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_ACTION* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_ACTION*>(
               &_S_PLAYER_ACTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_PLAYER_ACTION& a, S_PLAYER_ACTION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_ACTION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_ACTION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_ACTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_ACTION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_ACTION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_ACTION& from) {
    S_PLAYER_ACTION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_ACTION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_ACTION";
  }
  protected:
  explicit S_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kActionBitFieldNumber = 3,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 actionBit = 3;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_ACTION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    bool success_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_ARROW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_ARROW) */ {
 public:
  inline C_PLAYER_ARROW() : C_PLAYER_ARROW(nullptr) {}
  ~C_PLAYER_ARROW() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_ARROW(const C_PLAYER_ARROW& from);
  C_PLAYER_ARROW(C_PLAYER_ARROW&& from) noexcept
    : C_PLAYER_ARROW() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_ARROW& operator=(const C_PLAYER_ARROW& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_ARROW& operator=(C_PLAYER_ARROW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_ARROW& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_ARROW* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_ARROW*>(
               &_C_PLAYER_ARROW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_PLAYER_ARROW& a, C_PLAYER_ARROW& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_ARROW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_ARROW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_ARROW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_ARROW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_ARROW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_ARROW& from) {
    C_PLAYER_ARROW::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_ARROW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_ARROW";
  }
  protected:
  explicit C_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kVLookAtFieldNumber = 3,
    kYawFieldNumber = 2,
    kActionBitFieldNumber = 4,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.Vec3 vLookAt = 3;
  bool has_vlookat() const;
  private:
  bool _internal_has_vlookat() const;
  public:
  void clear_vlookat();
  const ::Protocol::Vec3& vlookat() const;
  PROTOBUF_NODISCARD ::Protocol::Vec3* release_vlookat();
  ::Protocol::Vec3* mutable_vlookat();
  void set_allocated_vlookat(::Protocol::Vec3* vlookat);
  private:
  const ::Protocol::Vec3& _internal_vlookat() const;
  ::Protocol::Vec3* _internal_mutable_vlookat();
  public:
  void unsafe_arena_set_allocated_vlookat(
      ::Protocol::Vec3* vlookat);
  ::Protocol::Vec3* unsafe_arena_release_vlookat();

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // uint32 actionBit = 4;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_ARROW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::Vec3* vlookat_;
    float yaw_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_ARROW final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_ARROW) */ {
 public:
  inline S_PLAYER_ARROW() : S_PLAYER_ARROW(nullptr) {}
  ~S_PLAYER_ARROW() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_ARROW(const S_PLAYER_ARROW& from);
  S_PLAYER_ARROW(S_PLAYER_ARROW&& from) noexcept
    : S_PLAYER_ARROW() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_ARROW& operator=(const S_PLAYER_ARROW& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_ARROW& operator=(S_PLAYER_ARROW&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_ARROW& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_ARROW* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_ARROW*>(
               &_S_PLAYER_ARROW_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_PLAYER_ARROW& a, S_PLAYER_ARROW& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_ARROW* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_ARROW* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_ARROW* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_ARROW>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_ARROW& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_ARROW& from) {
    S_PLAYER_ARROW::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_ARROW* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_ARROW";
  }
  protected:
  explicit S_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kVLookAtFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kYawFieldNumber = 3,
    kActionBitFieldNumber = 5,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.Vec3 vLookAt = 4;
  bool has_vlookat() const;
  private:
  bool _internal_has_vlookat() const;
  public:
  void clear_vlookat();
  const ::Protocol::Vec3& vlookat() const;
  PROTOBUF_NODISCARD ::Protocol::Vec3* release_vlookat();
  ::Protocol::Vec3* mutable_vlookat();
  void set_allocated_vlookat(::Protocol::Vec3* vlookat);
  private:
  const ::Protocol::Vec3& _internal_vlookat() const;
  ::Protocol::Vec3* _internal_mutable_vlookat();
  public:
  void unsafe_arena_set_allocated_vlookat(
      ::Protocol::Vec3* vlookat);
  ::Protocol::Vec3* unsafe_arena_release_vlookat();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // uint32 actionBit = 5;
  void clear_actionbit();
  uint32_t actionbit() const;
  void set_actionbit(uint32_t value);
  private:
  uint32_t _internal_actionbit() const;
  void _internal_set_actionbit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_ARROW)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::Vec3* vlookat_;
    bool success_;
    float yaw_;
    uint32_t actionbit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_EQUIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_EQUIP) */ {
 public:
  inline C_PLAYER_EQUIP() : C_PLAYER_EQUIP(nullptr) {}
  ~C_PLAYER_EQUIP() override;
  explicit PROTOBUF_CONSTEXPR C_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_EQUIP(const C_PLAYER_EQUIP& from);
  C_PLAYER_EQUIP(C_PLAYER_EQUIP&& from) noexcept
    : C_PLAYER_EQUIP() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_EQUIP& operator=(const C_PLAYER_EQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_EQUIP& operator=(C_PLAYER_EQUIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_EQUIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_EQUIP* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_EQUIP*>(
               &_C_PLAYER_EQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C_PLAYER_EQUIP& a, C_PLAYER_EQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_EQUIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_EQUIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYER_EQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYER_EQUIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PLAYER_EQUIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PLAYER_EQUIP& from) {
    C_PLAYER_EQUIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_EQUIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_EQUIP";
  }
  protected:
  explicit C_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.EquipState state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Protocol::EquipState& state() const;
  PROTOBUF_NODISCARD ::Protocol::EquipState* release_state();
  ::Protocol::EquipState* mutable_state();
  void set_allocated_state(::Protocol::EquipState* state);
  private:
  const ::Protocol::EquipState& _internal_state() const;
  ::Protocol::EquipState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::Protocol::EquipState* state);
  ::Protocol::EquipState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_EQUIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::EquipState* state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_EQUIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_EQUIP) */ {
 public:
  inline S_PLAYER_EQUIP() : S_PLAYER_EQUIP(nullptr) {}
  ~S_PLAYER_EQUIP() override;
  explicit PROTOBUF_CONSTEXPR S_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_EQUIP(const S_PLAYER_EQUIP& from);
  S_PLAYER_EQUIP(S_PLAYER_EQUIP&& from) noexcept
    : S_PLAYER_EQUIP() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_EQUIP& operator=(const S_PLAYER_EQUIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_EQUIP& operator=(S_PLAYER_EQUIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_EQUIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_EQUIP* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_EQUIP*>(
               &_S_PLAYER_EQUIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_PLAYER_EQUIP& a, S_PLAYER_EQUIP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_EQUIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_EQUIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYER_EQUIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYER_EQUIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYER_EQUIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PLAYER_EQUIP& from) {
    S_PLAYER_EQUIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_EQUIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_EQUIP";
  }
  protected:
  explicit S_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kStateFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* player);
  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::Player* player);
  ::Protocol::Player* unsafe_arena_release_player();

  // .Protocol.EquipState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Protocol::EquipState& state() const;
  PROTOBUF_NODISCARD ::Protocol::EquipState* release_state();
  ::Protocol::EquipState* mutable_state();
  void set_allocated_state(::Protocol::EquipState* state);
  private:
  const ::Protocol::EquipState& _internal_state() const;
  ::Protocol::EquipState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::Protocol::EquipState* state);
  ::Protocol::EquipState* unsafe_arena_release_state();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_EQUIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Player* player_;
    ::Protocol::EquipState* state_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SPAWN_MONSTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SPAWN_MONSTER) */ {
 public:
  inline C_SPAWN_MONSTER() : C_SPAWN_MONSTER(nullptr) {}
  ~C_SPAWN_MONSTER() override;
  explicit PROTOBUF_CONSTEXPR C_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SPAWN_MONSTER(const C_SPAWN_MONSTER& from);
  C_SPAWN_MONSTER(C_SPAWN_MONSTER&& from) noexcept
    : C_SPAWN_MONSTER() {
    *this = ::std::move(from);
  }

  inline C_SPAWN_MONSTER& operator=(const C_SPAWN_MONSTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SPAWN_MONSTER& operator=(C_SPAWN_MONSTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SPAWN_MONSTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SPAWN_MONSTER* internal_default_instance() {
    return reinterpret_cast<const C_SPAWN_MONSTER*>(
               &_C_SPAWN_MONSTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_SPAWN_MONSTER& a, C_SPAWN_MONSTER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SPAWN_MONSTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SPAWN_MONSTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SPAWN_MONSTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SPAWN_MONSTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SPAWN_MONSTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SPAWN_MONSTER& from) {
    C_SPAWN_MONSTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SPAWN_MONSTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SPAWN_MONSTER";
  }
  protected:
  explicit C_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactoryFieldNumber = 2,
    kMatrixFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string factory = 2;
  void clear_factory();
  const std::string& factory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_factory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_factory();
  PROTOBUF_NODISCARD std::string* release_factory();
  void set_allocated_factory(std::string* factory);
  private:
  const std::string& _internal_factory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factory(const std::string& value);
  std::string* _internal_mutable_factory();
  public:

  // .Protocol.Matrix matrix = 3;
  bool has_matrix() const;
  private:
  bool _internal_has_matrix() const;
  public:
  void clear_matrix();
  const ::Protocol::Matrix& matrix() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matrix();
  ::Protocol::Matrix* mutable_matrix();
  void set_allocated_matrix(::Protocol::Matrix* matrix);
  private:
  const ::Protocol::Matrix& _internal_matrix() const;
  ::Protocol::Matrix* _internal_mutable_matrix();
  public:
  void unsafe_arena_set_allocated_matrix(
      ::Protocol::Matrix* matrix);
  ::Protocol::Matrix* unsafe_arena_release_matrix();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SPAWN_MONSTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr factory_;
    ::Protocol::Matrix* matrix_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_MONSTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_MONSTER) */ {
 public:
  inline S_SPAWN_MONSTER() : S_SPAWN_MONSTER(nullptr) {}
  ~S_SPAWN_MONSTER() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_MONSTER(const S_SPAWN_MONSTER& from);
  S_SPAWN_MONSTER(S_SPAWN_MONSTER&& from) noexcept
    : S_SPAWN_MONSTER() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_MONSTER& operator=(const S_SPAWN_MONSTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_MONSTER& operator=(S_SPAWN_MONSTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_MONSTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_MONSTER* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_MONSTER*>(
               &_S_SPAWN_MONSTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_SPAWN_MONSTER& a, S_SPAWN_MONSTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_MONSTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_MONSTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_MONSTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_MONSTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_MONSTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_MONSTER& from) {
    S_SPAWN_MONSTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_MONSTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_MONSTER";
  }
  protected:
  explicit S_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactoryFieldNumber = 3,
    kMatrixFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string factory = 3;
  void clear_factory();
  const std::string& factory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_factory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_factory();
  PROTOBUF_NODISCARD std::string* release_factory();
  void set_allocated_factory(std::string* factory);
  private:
  const std::string& _internal_factory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_factory(const std::string& value);
  std::string* _internal_mutable_factory();
  public:

  // .Protocol.Matrix matrix = 4;
  bool has_matrix() const;
  private:
  bool _internal_has_matrix() const;
  public:
  void clear_matrix();
  const ::Protocol::Matrix& matrix() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matrix();
  ::Protocol::Matrix* mutable_matrix();
  void set_allocated_matrix(::Protocol::Matrix* matrix);
  private:
  const ::Protocol::Matrix& _internal_matrix() const;
  ::Protocol::Matrix* _internal_mutable_matrix();
  public:
  void unsafe_arena_set_allocated_matrix(
      ::Protocol::Matrix* matrix);
  ::Protocol::Matrix* unsafe_arena_release_matrix();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_MONSTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr factory_;
    ::Protocol::Matrix* matrix_;
    bool success_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MONSTER_SET_TARGET final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MONSTER_SET_TARGET) */ {
 public:
  inline C_MONSTER_SET_TARGET() : C_MONSTER_SET_TARGET(nullptr) {}
  ~C_MONSTER_SET_TARGET() override;
  explicit PROTOBUF_CONSTEXPR C_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MONSTER_SET_TARGET(const C_MONSTER_SET_TARGET& from);
  C_MONSTER_SET_TARGET(C_MONSTER_SET_TARGET&& from) noexcept
    : C_MONSTER_SET_TARGET() {
    *this = ::std::move(from);
  }

  inline C_MONSTER_SET_TARGET& operator=(const C_MONSTER_SET_TARGET& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MONSTER_SET_TARGET& operator=(C_MONSTER_SET_TARGET&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MONSTER_SET_TARGET& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MONSTER_SET_TARGET* internal_default_instance() {
    return reinterpret_cast<const C_MONSTER_SET_TARGET*>(
               &_C_MONSTER_SET_TARGET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(C_MONSTER_SET_TARGET& a, C_MONSTER_SET_TARGET& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MONSTER_SET_TARGET* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MONSTER_SET_TARGET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MONSTER_SET_TARGET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MONSTER_SET_TARGET>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MONSTER_SET_TARGET& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MONSTER_SET_TARGET& from) {
    C_MONSTER_SET_TARGET::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MONSTER_SET_TARGET* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MONSTER_SET_TARGET";
  }
  protected:
  explicit C_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBAttackFieldNumber = 1,
    kMonsterIDFieldNumber = 2,
    kPlayerIDFieldNumber = 3,
  };
  // bool bAttack = 1;
  void clear_battack();
  bool battack() const;
  void set_battack(bool value);
  private:
  bool _internal_battack() const;
  void _internal_set_battack(bool value);
  public:

  // uint32 monsterID = 2;
  void clear_monsterid();
  uint32_t monsterid() const;
  void set_monsterid(uint32_t value);
  private:
  uint32_t _internal_monsterid() const;
  void _internal_set_monsterid(uint32_t value);
  public:

  // uint32 playerID = 3;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MONSTER_SET_TARGET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool battack_;
    uint32_t monsterid_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MONSTER_SET_TARGET final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MONSTER_SET_TARGET) */ {
 public:
  inline S_MONSTER_SET_TARGET() : S_MONSTER_SET_TARGET(nullptr) {}
  ~S_MONSTER_SET_TARGET() override;
  explicit PROTOBUF_CONSTEXPR S_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MONSTER_SET_TARGET(const S_MONSTER_SET_TARGET& from);
  S_MONSTER_SET_TARGET(S_MONSTER_SET_TARGET&& from) noexcept
    : S_MONSTER_SET_TARGET() {
    *this = ::std::move(from);
  }

  inline S_MONSTER_SET_TARGET& operator=(const S_MONSTER_SET_TARGET& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MONSTER_SET_TARGET& operator=(S_MONSTER_SET_TARGET&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MONSTER_SET_TARGET& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MONSTER_SET_TARGET* internal_default_instance() {
    return reinterpret_cast<const S_MONSTER_SET_TARGET*>(
               &_S_MONSTER_SET_TARGET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_MONSTER_SET_TARGET& a, S_MONSTER_SET_TARGET& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MONSTER_SET_TARGET* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MONSTER_SET_TARGET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MONSTER_SET_TARGET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MONSTER_SET_TARGET>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MONSTER_SET_TARGET& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MONSTER_SET_TARGET& from) {
    S_MONSTER_SET_TARGET::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MONSTER_SET_TARGET* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MONSTER_SET_TARGET";
  }
  protected:
  explicit S_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kBAttackFieldNumber = 2,
    kMonsterIDFieldNumber = 3,
    kPlayerIDFieldNumber = 4,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool bAttack = 2;
  void clear_battack();
  bool battack() const;
  void set_battack(bool value);
  private:
  bool _internal_battack() const;
  void _internal_set_battack(bool value);
  public:

  // uint32 monsterID = 3;
  void clear_monsterid();
  uint32_t monsterid() const;
  void set_monsterid(uint32_t value);
  private:
  uint32_t _internal_monsterid() const;
  void _internal_set_monsterid(uint32_t value);
  public:

  // uint32 playerID = 4;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MONSTER_SET_TARGET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    bool battack_;
    uint32_t monsterid_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MONSTER_WORLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MONSTER_WORLD) */ {
 public:
  inline C_MONSTER_WORLD() : C_MONSTER_WORLD(nullptr) {}
  ~C_MONSTER_WORLD() override;
  explicit PROTOBUF_CONSTEXPR C_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MONSTER_WORLD(const C_MONSTER_WORLD& from);
  C_MONSTER_WORLD(C_MONSTER_WORLD&& from) noexcept
    : C_MONSTER_WORLD() {
    *this = ::std::move(from);
  }

  inline C_MONSTER_WORLD& operator=(const C_MONSTER_WORLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MONSTER_WORLD& operator=(C_MONSTER_WORLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MONSTER_WORLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MONSTER_WORLD* internal_default_instance() {
    return reinterpret_cast<const C_MONSTER_WORLD*>(
               &_C_MONSTER_WORLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C_MONSTER_WORLD& a, C_MONSTER_WORLD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MONSTER_WORLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MONSTER_WORLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MONSTER_WORLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MONSTER_WORLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MONSTER_WORLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MONSTER_WORLD& from) {
    C_MONSTER_WORLD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MONSTER_WORLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MONSTER_WORLD";
  }
  protected:
  explicit C_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatWorldFieldNumber = 2,
    kMonsterIDFieldNumber = 1,
  };
  // .Protocol.Matrix matWorld = 2;
  bool has_matworld() const;
  private:
  bool _internal_has_matworld() const;
  public:
  void clear_matworld();
  const ::Protocol::Matrix& matworld() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matworld();
  ::Protocol::Matrix* mutable_matworld();
  void set_allocated_matworld(::Protocol::Matrix* matworld);
  private:
  const ::Protocol::Matrix& _internal_matworld() const;
  ::Protocol::Matrix* _internal_mutable_matworld();
  public:
  void unsafe_arena_set_allocated_matworld(
      ::Protocol::Matrix* matworld);
  ::Protocol::Matrix* unsafe_arena_release_matworld();

  // uint32 monsterID = 1;
  void clear_monsterid();
  uint32_t monsterid() const;
  void set_monsterid(uint32_t value);
  private:
  uint32_t _internal_monsterid() const;
  void _internal_set_monsterid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MONSTER_WORLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Matrix* matworld_;
    uint32_t monsterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MONSTER_WORLD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MONSTER_WORLD) */ {
 public:
  inline S_MONSTER_WORLD() : S_MONSTER_WORLD(nullptr) {}
  ~S_MONSTER_WORLD() override;
  explicit PROTOBUF_CONSTEXPR S_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MONSTER_WORLD(const S_MONSTER_WORLD& from);
  S_MONSTER_WORLD(S_MONSTER_WORLD&& from) noexcept
    : S_MONSTER_WORLD() {
    *this = ::std::move(from);
  }

  inline S_MONSTER_WORLD& operator=(const S_MONSTER_WORLD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MONSTER_WORLD& operator=(S_MONSTER_WORLD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MONSTER_WORLD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MONSTER_WORLD* internal_default_instance() {
    return reinterpret_cast<const S_MONSTER_WORLD*>(
               &_S_MONSTER_WORLD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_MONSTER_WORLD& a, S_MONSTER_WORLD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MONSTER_WORLD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MONSTER_WORLD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MONSTER_WORLD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MONSTER_WORLD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MONSTER_WORLD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MONSTER_WORLD& from) {
    S_MONSTER_WORLD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MONSTER_WORLD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MONSTER_WORLD";
  }
  protected:
  explicit S_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatWorldFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kMonsterIDFieldNumber = 2,
  };
  // .Protocol.Matrix matWorld = 3;
  bool has_matworld() const;
  private:
  bool _internal_has_matworld() const;
  public:
  void clear_matworld();
  const ::Protocol::Matrix& matworld() const;
  PROTOBUF_NODISCARD ::Protocol::Matrix* release_matworld();
  ::Protocol::Matrix* mutable_matworld();
  void set_allocated_matworld(::Protocol::Matrix* matworld);
  private:
  const ::Protocol::Matrix& _internal_matworld() const;
  ::Protocol::Matrix* _internal_mutable_matworld();
  public:
  void unsafe_arena_set_allocated_matworld(
      ::Protocol::Matrix* matworld);
  ::Protocol::Matrix* unsafe_arena_release_matworld();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 monsterID = 2;
  void clear_monsterid();
  uint32_t monsterid() const;
  void set_monsterid(uint32_t value);
  private:
  uint32_t _internal_monsterid() const;
  void _internal_set_monsterid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MONSTER_WORLD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Matrix* matworld_;
    bool success_;
    uint32_t monsterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// uint32 playerID = 2;
inline void S_LOGIN::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t S_LOGIN::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t S_LOGIN::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.playerID)
  return _internal_playerid();
}
inline void S_LOGIN::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_LOGIN::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.playerID)
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// .Protocol.Player player = 1;
inline bool C_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_ENTER_GAME::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.player)
  return _internal_player();
}
inline void C_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ENTER_GAME.player)
}
inline ::Protocol::Player* C_ENTER_GAME::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_ENTER_GAME.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_ENTER_GAME::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ENTER_GAME.player)
  return _msg;
}
inline void C_ENTER_GAME::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ENTER_GAME.player)
}

// .Protocol.PlayerSkin playerSkin = 2;
inline void C_ENTER_GAME::clear_playerskin() {
  _impl_.playerskin_ = 0;
}
inline ::Protocol::PlayerSkin C_ENTER_GAME::_internal_playerskin() const {
  return static_cast< ::Protocol::PlayerSkin >(_impl_.playerskin_);
}
inline ::Protocol::PlayerSkin C_ENTER_GAME::playerskin() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.playerSkin)
  return _internal_playerskin();
}
inline void C_ENTER_GAME::_internal_set_playerskin(::Protocol::PlayerSkin value) {
  
  _impl_.playerskin_ = value;
}
inline void C_ENTER_GAME::set_playerskin(::Protocol::PlayerSkin value) {
  _internal_set_playerskin(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_GAME.playerSkin)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// .Protocol.Player player = 2;
inline bool S_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_ENTER_GAME::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.player)
  return _internal_player();
}
inline void S_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_GAME.player)
}
inline ::Protocol::Player* S_ENTER_GAME::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_ENTER_GAME::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.player)
  return _msg;
}
inline void S_ENTER_GAME::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.player)
}

// .Protocol.PlayerSkin playerSkin = 3;
inline void S_ENTER_GAME::clear_playerskin() {
  _impl_.playerskin_ = 0;
}
inline ::Protocol::PlayerSkin S_ENTER_GAME::_internal_playerskin() const {
  return static_cast< ::Protocol::PlayerSkin >(_impl_.playerskin_);
}
inline ::Protocol::PlayerSkin S_ENTER_GAME::playerskin() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.playerSkin)
  return _internal_playerskin();
}
inline void S_ENTER_GAME::_internal_set_playerskin(::Protocol::PlayerSkin value) {
  
  _impl_.playerskin_ = value;
}
inline void S_ENTER_GAME::set_playerskin(::Protocol::PlayerSkin value) {
  _internal_set_playerskin(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.playerSkin)
}

// -------------------------------------------------------------------

// S_OTHER_PLAYER

// repeated .Protocol.Player player = 1;
inline int S_OTHER_PLAYER::_internal_player_size() const {
  return _impl_.player_.size();
}
inline int S_OTHER_PLAYER::player_size() const {
  return _internal_player_size();
}
inline ::Protocol::Player* S_OTHER_PLAYER::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OTHER_PLAYER.player)
  return _impl_.player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_OTHER_PLAYER::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OTHER_PLAYER.player)
  return &_impl_.player_;
}
inline const ::Protocol::Player& S_OTHER_PLAYER::_internal_player(int index) const {
  return _impl_.player_.Get(index);
}
inline const ::Protocol::Player& S_OTHER_PLAYER::player(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER.player)
  return _internal_player(index);
}
inline ::Protocol::Player* S_OTHER_PLAYER::_internal_add_player() {
  return _impl_.player_.Add();
}
inline ::Protocol::Player* S_OTHER_PLAYER::add_player() {
  ::Protocol::Player* _add = _internal_add_player();
  // @@protoc_insertion_point(field_add:Protocol.S_OTHER_PLAYER.player)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_OTHER_PLAYER::player() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OTHER_PLAYER.player)
  return _impl_.player_;
}

// repeated .Protocol.PlayerSkin playerSkin = 2;
inline int S_OTHER_PLAYER::_internal_playerskin_size() const {
  return _impl_.playerskin_.size();
}
inline int S_OTHER_PLAYER::playerskin_size() const {
  return _internal_playerskin_size();
}
inline void S_OTHER_PLAYER::clear_playerskin() {
  _impl_.playerskin_.Clear();
}
inline ::Protocol::PlayerSkin S_OTHER_PLAYER::_internal_playerskin(int index) const {
  return static_cast< ::Protocol::PlayerSkin >(_impl_.playerskin_.Get(index));
}
inline ::Protocol::PlayerSkin S_OTHER_PLAYER::playerskin(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER.playerSkin)
  return _internal_playerskin(index);
}
inline void S_OTHER_PLAYER::set_playerskin(int index, ::Protocol::PlayerSkin value) {
  _impl_.playerskin_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER.playerSkin)
}
inline void S_OTHER_PLAYER::_internal_add_playerskin(::Protocol::PlayerSkin value) {
  _impl_.playerskin_.Add(value);
}
inline void S_OTHER_PLAYER::add_playerskin(::Protocol::PlayerSkin value) {
  _internal_add_playerskin(value);
  // @@protoc_insertion_point(field_add:Protocol.S_OTHER_PLAYER.playerSkin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
S_OTHER_PLAYER::playerskin() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OTHER_PLAYER.playerSkin)
  return _impl_.playerskin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
S_OTHER_PLAYER::_internal_mutable_playerskin() {
  return &_impl_.playerskin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
S_OTHER_PLAYER::mutable_playerskin() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OTHER_PLAYER.playerSkin)
  return _internal_mutable_playerskin();
}

// -------------------------------------------------------------------

// C_PLAYER_INPUT

// .Protocol.Player player = 1;
inline bool C_PLAYER_INPUT::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_INPUT::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_INPUT::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_INPUT::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INPUT.player)
  return _internal_player();
}
inline void C_PLAYER_INPUT::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_INPUT.player)
}
inline ::Protocol::Player* C_PLAYER_INPUT::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_INPUT::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_INPUT.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_INPUT::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_INPUT::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_INPUT.player)
  return _msg;
}
inline void C_PLAYER_INPUT::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_INPUT.player)
}

// uint32 inputBit = 2;
inline void C_PLAYER_INPUT::clear_inputbit() {
  _impl_.inputbit_ = 0u;
}
inline uint32_t C_PLAYER_INPUT::_internal_inputbit() const {
  return _impl_.inputbit_;
}
inline uint32_t C_PLAYER_INPUT::inputbit() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INPUT.inputBit)
  return _internal_inputbit();
}
inline void C_PLAYER_INPUT::_internal_set_inputbit(uint32_t value) {
  
  _impl_.inputbit_ = value;
}
inline void C_PLAYER_INPUT::set_inputbit(uint32_t value) {
  _internal_set_inputbit(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INPUT.inputBit)
}

// -------------------------------------------------------------------

// S_PLAYER_INPUT

// bool success = 1;
inline void S_PLAYER_INPUT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_INPUT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_INPUT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INPUT.success)
  return _internal_success();
}
inline void S_PLAYER_INPUT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_INPUT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_INPUT.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_INPUT::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_INPUT::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_INPUT::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_INPUT::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INPUT.player)
  return _internal_player();
}
inline void S_PLAYER_INPUT::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_INPUT.player)
}
inline ::Protocol::Player* S_PLAYER_INPUT::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_INPUT::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_INPUT.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_INPUT::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_INPUT::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_INPUT.player)
  return _msg;
}
inline void S_PLAYER_INPUT::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_INPUT.player)
}

// uint32 inputBit = 3;
inline void S_PLAYER_INPUT::clear_inputbit() {
  _impl_.inputbit_ = 0u;
}
inline uint32_t S_PLAYER_INPUT::_internal_inputbit() const {
  return _impl_.inputbit_;
}
inline uint32_t S_PLAYER_INPUT::inputbit() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INPUT.inputBit)
  return _internal_inputbit();
}
inline void S_PLAYER_INPUT::_internal_set_inputbit(uint32_t value) {
  
  _impl_.inputbit_ = value;
}
inline void S_PLAYER_INPUT::set_inputbit(uint32_t value) {
  _internal_set_inputbit(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_INPUT.inputBit)
}

// -------------------------------------------------------------------

// C_PLAYER_WORLD

// .Protocol.Player player = 1;
inline bool C_PLAYER_WORLD::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_WORLD::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_WORLD::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_WORLD::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_WORLD.player)
  return _internal_player();
}
inline void C_PLAYER_WORLD::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_WORLD.player)
}
inline ::Protocol::Player* C_PLAYER_WORLD::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_WORLD::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_WORLD.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_WORLD::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_WORLD::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_WORLD.player)
  return _msg;
}
inline void C_PLAYER_WORLD::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_WORLD.player)
}

// .Protocol.Matrix matWorld = 2;
inline bool C_PLAYER_WORLD::_internal_has_matworld() const {
  return this != internal_default_instance() && _impl_.matworld_ != nullptr;
}
inline bool C_PLAYER_WORLD::has_matworld() const {
  return _internal_has_matworld();
}
inline const ::Protocol::Matrix& C_PLAYER_WORLD::_internal_matworld() const {
  const ::Protocol::Matrix* p = _impl_.matworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& C_PLAYER_WORLD::matworld() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_WORLD.matWorld)
  return _internal_matworld();
}
inline void C_PLAYER_WORLD::unsafe_arena_set_allocated_matworld(
    ::Protocol::Matrix* matworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  _impl_.matworld_ = matworld;
  if (matworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_WORLD.matWorld)
}
inline ::Protocol::Matrix* C_PLAYER_WORLD::release_matworld() {
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* C_PLAYER_WORLD::unsafe_arena_release_matworld() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_WORLD.matWorld)
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* C_PLAYER_WORLD::_internal_mutable_matworld() {
  
  if (_impl_.matworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matworld_ = p;
  }
  return _impl_.matworld_;
}
inline ::Protocol::Matrix* C_PLAYER_WORLD::mutable_matworld() {
  ::Protocol::Matrix* _msg = _internal_mutable_matworld();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_WORLD.matWorld)
  return _msg;
}
inline void C_PLAYER_WORLD::set_allocated_matworld(::Protocol::Matrix* matworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  if (matworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matworld));
    if (message_arena != submessage_arena) {
      matworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matworld_ = matworld;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_WORLD.matWorld)
}

// -------------------------------------------------------------------

// S_PLAYER_WORLD

// bool success = 1;
inline void S_PLAYER_WORLD::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_WORLD::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_WORLD::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_WORLD.success)
  return _internal_success();
}
inline void S_PLAYER_WORLD::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_WORLD::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_WORLD.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_WORLD::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_WORLD::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_WORLD::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_WORLD::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_WORLD.player)
  return _internal_player();
}
inline void S_PLAYER_WORLD::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_WORLD.player)
}
inline ::Protocol::Player* S_PLAYER_WORLD::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_WORLD::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_WORLD.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_WORLD::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_WORLD::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_WORLD.player)
  return _msg;
}
inline void S_PLAYER_WORLD::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_WORLD.player)
}

// .Protocol.Matrix matWorld = 3;
inline bool S_PLAYER_WORLD::_internal_has_matworld() const {
  return this != internal_default_instance() && _impl_.matworld_ != nullptr;
}
inline bool S_PLAYER_WORLD::has_matworld() const {
  return _internal_has_matworld();
}
inline const ::Protocol::Matrix& S_PLAYER_WORLD::_internal_matworld() const {
  const ::Protocol::Matrix* p = _impl_.matworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& S_PLAYER_WORLD::matworld() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_WORLD.matWorld)
  return _internal_matworld();
}
inline void S_PLAYER_WORLD::unsafe_arena_set_allocated_matworld(
    ::Protocol::Matrix* matworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  _impl_.matworld_ = matworld;
  if (matworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_WORLD.matWorld)
}
inline ::Protocol::Matrix* S_PLAYER_WORLD::release_matworld() {
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* S_PLAYER_WORLD::unsafe_arena_release_matworld() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_WORLD.matWorld)
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* S_PLAYER_WORLD::_internal_mutable_matworld() {
  
  if (_impl_.matworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matworld_ = p;
  }
  return _impl_.matworld_;
}
inline ::Protocol::Matrix* S_PLAYER_WORLD::mutable_matworld() {
  ::Protocol::Matrix* _msg = _internal_mutable_matworld();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_WORLD.matWorld)
  return _msg;
}
inline void S_PLAYER_WORLD::set_allocated_matworld(::Protocol::Matrix* matworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  if (matworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matworld));
    if (message_arena != submessage_arena) {
      matworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matworld_ = matworld;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_WORLD.matWorld)
}

// -------------------------------------------------------------------

// C_PLAYER_YAW_ACTION

// .Protocol.Player player = 1;
inline bool C_PLAYER_YAW_ACTION::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_YAW_ACTION::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_YAW_ACTION::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_YAW_ACTION::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_YAW_ACTION.player)
  return _internal_player();
}
inline void C_PLAYER_YAW_ACTION::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_YAW_ACTION.player)
}
inline ::Protocol::Player* C_PLAYER_YAW_ACTION::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_YAW_ACTION::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_YAW_ACTION.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_YAW_ACTION::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_YAW_ACTION::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_YAW_ACTION.player)
  return _msg;
}
inline void C_PLAYER_YAW_ACTION::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_YAW_ACTION.player)
}

// float yaw = 2;
inline void C_PLAYER_YAW_ACTION::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float C_PLAYER_YAW_ACTION::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float C_PLAYER_YAW_ACTION::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_YAW_ACTION.yaw)
  return _internal_yaw();
}
inline void C_PLAYER_YAW_ACTION::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void C_PLAYER_YAW_ACTION::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_YAW_ACTION.yaw)
}

// uint32 actionBit = 3;
inline void C_PLAYER_YAW_ACTION::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t C_PLAYER_YAW_ACTION::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t C_PLAYER_YAW_ACTION::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_YAW_ACTION.actionBit)
  return _internal_actionbit();
}
inline void C_PLAYER_YAW_ACTION::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void C_PLAYER_YAW_ACTION::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_YAW_ACTION.actionBit)
}

// -------------------------------------------------------------------

// S_PLAYER_YAW_ACTION

// bool success = 1;
inline void S_PLAYER_YAW_ACTION::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_YAW_ACTION::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_YAW_ACTION::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_YAW_ACTION.success)
  return _internal_success();
}
inline void S_PLAYER_YAW_ACTION::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_YAW_ACTION::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_YAW_ACTION.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_YAW_ACTION::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_YAW_ACTION::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_YAW_ACTION::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_YAW_ACTION::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_YAW_ACTION.player)
  return _internal_player();
}
inline void S_PLAYER_YAW_ACTION::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_YAW_ACTION.player)
}
inline ::Protocol::Player* S_PLAYER_YAW_ACTION::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_YAW_ACTION::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_YAW_ACTION.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_YAW_ACTION::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_YAW_ACTION::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_YAW_ACTION.player)
  return _msg;
}
inline void S_PLAYER_YAW_ACTION::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_YAW_ACTION.player)
}

// float yaw = 3;
inline void S_PLAYER_YAW_ACTION::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float S_PLAYER_YAW_ACTION::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float S_PLAYER_YAW_ACTION::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_YAW_ACTION.yaw)
  return _internal_yaw();
}
inline void S_PLAYER_YAW_ACTION::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void S_PLAYER_YAW_ACTION::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_YAW_ACTION.yaw)
}

// uint32 actionBit = 4;
inline void S_PLAYER_YAW_ACTION::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t S_PLAYER_YAW_ACTION::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t S_PLAYER_YAW_ACTION::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_YAW_ACTION.actionBit)
  return _internal_actionbit();
}
inline void S_PLAYER_YAW_ACTION::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void S_PLAYER_YAW_ACTION::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_YAW_ACTION.actionBit)
}

// -------------------------------------------------------------------

// C_PLAYER_ACTION

// .Protocol.Player player = 1;
inline bool C_PLAYER_ACTION::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_ACTION::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_ACTION::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_ACTION::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ACTION.player)
  return _internal_player();
}
inline void C_PLAYER_ACTION::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_ACTION.player)
}
inline ::Protocol::Player* C_PLAYER_ACTION::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_ACTION::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_ACTION.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_ACTION::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_ACTION::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_ACTION.player)
  return _msg;
}
inline void C_PLAYER_ACTION::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_ACTION.player)
}

// uint32 actionBit = 2;
inline void C_PLAYER_ACTION::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t C_PLAYER_ACTION::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t C_PLAYER_ACTION::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ACTION.actionBit)
  return _internal_actionbit();
}
inline void C_PLAYER_ACTION::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void C_PLAYER_ACTION::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_ACTION.actionBit)
}

// -------------------------------------------------------------------

// S_PLAYER_ACTION

// bool success = 1;
inline void S_PLAYER_ACTION::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_ACTION::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_ACTION::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ACTION.success)
  return _internal_success();
}
inline void S_PLAYER_ACTION::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_ACTION::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ACTION.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_ACTION::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_ACTION::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_ACTION::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_ACTION::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ACTION.player)
  return _internal_player();
}
inline void S_PLAYER_ACTION::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_ACTION.player)
}
inline ::Protocol::Player* S_PLAYER_ACTION::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ACTION::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_ACTION.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ACTION::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_ACTION::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_ACTION.player)
  return _msg;
}
inline void S_PLAYER_ACTION::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_ACTION.player)
}

// uint32 actionBit = 3;
inline void S_PLAYER_ACTION::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t S_PLAYER_ACTION::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t S_PLAYER_ACTION::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ACTION.actionBit)
  return _internal_actionbit();
}
inline void S_PLAYER_ACTION::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void S_PLAYER_ACTION::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ACTION.actionBit)
}

// -------------------------------------------------------------------

// C_PLAYER_ARROW

// .Protocol.Player player = 1;
inline bool C_PLAYER_ARROW::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_ARROW::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_ARROW::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_ARROW::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ARROW.player)
  return _internal_player();
}
inline void C_PLAYER_ARROW::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_ARROW.player)
}
inline ::Protocol::Player* C_PLAYER_ARROW::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_ARROW::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_ARROW.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_ARROW::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_ARROW::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_ARROW.player)
  return _msg;
}
inline void C_PLAYER_ARROW::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_ARROW.player)
}

// float yaw = 2;
inline void C_PLAYER_ARROW::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float C_PLAYER_ARROW::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float C_PLAYER_ARROW::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ARROW.yaw)
  return _internal_yaw();
}
inline void C_PLAYER_ARROW::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void C_PLAYER_ARROW::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_ARROW.yaw)
}

// .Protocol.Vec3 vLookAt = 3;
inline bool C_PLAYER_ARROW::_internal_has_vlookat() const {
  return this != internal_default_instance() && _impl_.vlookat_ != nullptr;
}
inline bool C_PLAYER_ARROW::has_vlookat() const {
  return _internal_has_vlookat();
}
inline const ::Protocol::Vec3& C_PLAYER_ARROW::_internal_vlookat() const {
  const ::Protocol::Vec3* p = _impl_.vlookat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec3&>(
      ::Protocol::_Vec3_default_instance_);
}
inline const ::Protocol::Vec3& C_PLAYER_ARROW::vlookat() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ARROW.vLookAt)
  return _internal_vlookat();
}
inline void C_PLAYER_ARROW::unsafe_arena_set_allocated_vlookat(
    ::Protocol::Vec3* vlookat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vlookat_);
  }
  _impl_.vlookat_ = vlookat;
  if (vlookat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_ARROW.vLookAt)
}
inline ::Protocol::Vec3* C_PLAYER_ARROW::release_vlookat() {
  
  ::Protocol::Vec3* temp = _impl_.vlookat_;
  _impl_.vlookat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec3* C_PLAYER_ARROW::unsafe_arena_release_vlookat() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_ARROW.vLookAt)
  
  ::Protocol::Vec3* temp = _impl_.vlookat_;
  _impl_.vlookat_ = nullptr;
  return temp;
}
inline ::Protocol::Vec3* C_PLAYER_ARROW::_internal_mutable_vlookat() {
  
  if (_impl_.vlookat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec3>(GetArenaForAllocation());
    _impl_.vlookat_ = p;
  }
  return _impl_.vlookat_;
}
inline ::Protocol::Vec3* C_PLAYER_ARROW::mutable_vlookat() {
  ::Protocol::Vec3* _msg = _internal_mutable_vlookat();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_ARROW.vLookAt)
  return _msg;
}
inline void C_PLAYER_ARROW::set_allocated_vlookat(::Protocol::Vec3* vlookat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vlookat_);
  }
  if (vlookat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vlookat));
    if (message_arena != submessage_arena) {
      vlookat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vlookat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vlookat_ = vlookat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_ARROW.vLookAt)
}

// uint32 actionBit = 4;
inline void C_PLAYER_ARROW::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t C_PLAYER_ARROW::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t C_PLAYER_ARROW::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_ARROW.actionBit)
  return _internal_actionbit();
}
inline void C_PLAYER_ARROW::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void C_PLAYER_ARROW::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_ARROW.actionBit)
}

// -------------------------------------------------------------------

// S_PLAYER_ARROW

// bool success = 1;
inline void S_PLAYER_ARROW::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_ARROW::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_ARROW::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ARROW.success)
  return _internal_success();
}
inline void S_PLAYER_ARROW::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_ARROW::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ARROW.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_ARROW::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_ARROW::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_ARROW::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_ARROW::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ARROW.player)
  return _internal_player();
}
inline void S_PLAYER_ARROW::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_ARROW.player)
}
inline ::Protocol::Player* S_PLAYER_ARROW::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ARROW::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_ARROW.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_ARROW::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_ARROW::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_ARROW.player)
  return _msg;
}
inline void S_PLAYER_ARROW::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_ARROW.player)
}

// float yaw = 3;
inline void S_PLAYER_ARROW::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float S_PLAYER_ARROW::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float S_PLAYER_ARROW::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ARROW.yaw)
  return _internal_yaw();
}
inline void S_PLAYER_ARROW::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void S_PLAYER_ARROW::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ARROW.yaw)
}

// .Protocol.Vec3 vLookAt = 4;
inline bool S_PLAYER_ARROW::_internal_has_vlookat() const {
  return this != internal_default_instance() && _impl_.vlookat_ != nullptr;
}
inline bool S_PLAYER_ARROW::has_vlookat() const {
  return _internal_has_vlookat();
}
inline const ::Protocol::Vec3& S_PLAYER_ARROW::_internal_vlookat() const {
  const ::Protocol::Vec3* p = _impl_.vlookat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vec3&>(
      ::Protocol::_Vec3_default_instance_);
}
inline const ::Protocol::Vec3& S_PLAYER_ARROW::vlookat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ARROW.vLookAt)
  return _internal_vlookat();
}
inline void S_PLAYER_ARROW::unsafe_arena_set_allocated_vlookat(
    ::Protocol::Vec3* vlookat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vlookat_);
  }
  _impl_.vlookat_ = vlookat;
  if (vlookat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_ARROW.vLookAt)
}
inline ::Protocol::Vec3* S_PLAYER_ARROW::release_vlookat() {
  
  ::Protocol::Vec3* temp = _impl_.vlookat_;
  _impl_.vlookat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vec3* S_PLAYER_ARROW::unsafe_arena_release_vlookat() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_ARROW.vLookAt)
  
  ::Protocol::Vec3* temp = _impl_.vlookat_;
  _impl_.vlookat_ = nullptr;
  return temp;
}
inline ::Protocol::Vec3* S_PLAYER_ARROW::_internal_mutable_vlookat() {
  
  if (_impl_.vlookat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vec3>(GetArenaForAllocation());
    _impl_.vlookat_ = p;
  }
  return _impl_.vlookat_;
}
inline ::Protocol::Vec3* S_PLAYER_ARROW::mutable_vlookat() {
  ::Protocol::Vec3* _msg = _internal_mutable_vlookat();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_ARROW.vLookAt)
  return _msg;
}
inline void S_PLAYER_ARROW::set_allocated_vlookat(::Protocol::Vec3* vlookat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vlookat_);
  }
  if (vlookat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vlookat));
    if (message_arena != submessage_arena) {
      vlookat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vlookat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vlookat_ = vlookat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_ARROW.vLookAt)
}

// uint32 actionBit = 5;
inline void S_PLAYER_ARROW::clear_actionbit() {
  _impl_.actionbit_ = 0u;
}
inline uint32_t S_PLAYER_ARROW::_internal_actionbit() const {
  return _impl_.actionbit_;
}
inline uint32_t S_PLAYER_ARROW::actionbit() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_ARROW.actionBit)
  return _internal_actionbit();
}
inline void S_PLAYER_ARROW::_internal_set_actionbit(uint32_t value) {
  
  _impl_.actionbit_ = value;
}
inline void S_PLAYER_ARROW::set_actionbit(uint32_t value) {
  _internal_set_actionbit(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_ARROW.actionBit)
}

// -------------------------------------------------------------------

// C_PLAYER_EQUIP

// .Protocol.Player player = 1;
inline bool C_PLAYER_EQUIP::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_PLAYER_EQUIP::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& C_PLAYER_EQUIP::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& C_PLAYER_EQUIP::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_EQUIP.player)
  return _internal_player();
}
inline void C_PLAYER_EQUIP::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_EQUIP.player)
}
inline ::Protocol::Player* C_PLAYER_EQUIP::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* C_PLAYER_EQUIP::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_EQUIP.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* C_PLAYER_EQUIP::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* C_PLAYER_EQUIP::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_EQUIP.player)
  return _msg;
}
inline void C_PLAYER_EQUIP::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_EQUIP.player)
}

// .Protocol.EquipState state = 2;
inline bool C_PLAYER_EQUIP::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool C_PLAYER_EQUIP::has_state() const {
  return _internal_has_state();
}
inline const ::Protocol::EquipState& C_PLAYER_EQUIP::_internal_state() const {
  const ::Protocol::EquipState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EquipState&>(
      ::Protocol::_EquipState_default_instance_);
}
inline const ::Protocol::EquipState& C_PLAYER_EQUIP::state() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_EQUIP.state)
  return _internal_state();
}
inline void C_PLAYER_EQUIP::unsafe_arena_set_allocated_state(
    ::Protocol::EquipState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_PLAYER_EQUIP.state)
}
inline ::Protocol::EquipState* C_PLAYER_EQUIP::release_state() {
  
  ::Protocol::EquipState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::EquipState* C_PLAYER_EQUIP::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:Protocol.C_PLAYER_EQUIP.state)
  
  ::Protocol::EquipState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::EquipState* C_PLAYER_EQUIP::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EquipState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::Protocol::EquipState* C_PLAYER_EQUIP::mutable_state() {
  ::Protocol::EquipState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PLAYER_EQUIP.state)
  return _msg;
}
inline void C_PLAYER_EQUIP::set_allocated_state(::Protocol::EquipState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PLAYER_EQUIP.state)
}

// -------------------------------------------------------------------

// S_PLAYER_EQUIP

// bool success = 1;
inline void S_PLAYER_EQUIP::clear_success() {
  _impl_.success_ = false;
}
inline bool S_PLAYER_EQUIP::_internal_success() const {
  return _impl_.success_;
}
inline bool S_PLAYER_EQUIP::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_EQUIP.success)
  return _internal_success();
}
inline void S_PLAYER_EQUIP::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_PLAYER_EQUIP::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_EQUIP.success)
}

// .Protocol.Player player = 2;
inline bool S_PLAYER_EQUIP::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_PLAYER_EQUIP::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::Player& S_PLAYER_EQUIP::_internal_player() const {
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(
      ::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_PLAYER_EQUIP::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_EQUIP.player)
  return _internal_player();
}
inline void S_PLAYER_EQUIP::unsafe_arena_set_allocated_player(
    ::Protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_EQUIP.player)
}
inline ::Protocol::Player* S_PLAYER_EQUIP::release_player() {
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Player* S_PLAYER_EQUIP::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_EQUIP.player)
  
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_PLAYER_EQUIP::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_PLAYER_EQUIP::mutable_player() {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_EQUIP.player)
  return _msg;
}
inline void S_PLAYER_EQUIP::set_allocated_player(::Protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_EQUIP.player)
}

// .Protocol.EquipState state = 3;
inline bool S_PLAYER_EQUIP::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool S_PLAYER_EQUIP::has_state() const {
  return _internal_has_state();
}
inline const ::Protocol::EquipState& S_PLAYER_EQUIP::_internal_state() const {
  const ::Protocol::EquipState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EquipState&>(
      ::Protocol::_EquipState_default_instance_);
}
inline const ::Protocol::EquipState& S_PLAYER_EQUIP::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_EQUIP.state)
  return _internal_state();
}
inline void S_PLAYER_EQUIP::unsafe_arena_set_allocated_state(
    ::Protocol::EquipState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PLAYER_EQUIP.state)
}
inline ::Protocol::EquipState* S_PLAYER_EQUIP::release_state() {
  
  ::Protocol::EquipState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::EquipState* S_PLAYER_EQUIP::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:Protocol.S_PLAYER_EQUIP.state)
  
  ::Protocol::EquipState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::EquipState* S_PLAYER_EQUIP::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EquipState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::Protocol::EquipState* S_PLAYER_EQUIP::mutable_state() {
  ::Protocol::EquipState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PLAYER_EQUIP.state)
  return _msg;
}
inline void S_PLAYER_EQUIP::set_allocated_state(::Protocol::EquipState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PLAYER_EQUIP.state)
}

// -------------------------------------------------------------------

// C_SPAWN_MONSTER

// uint32 id = 1;
inline void C_SPAWN_MONSTER::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t C_SPAWN_MONSTER::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t C_SPAWN_MONSTER::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_MONSTER.id)
  return _internal_id();
}
inline void C_SPAWN_MONSTER::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void C_SPAWN_MONSTER::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SPAWN_MONSTER.id)
}

// string factory = 2;
inline void C_SPAWN_MONSTER::clear_factory() {
  _impl_.factory_.ClearToEmpty();
}
inline const std::string& C_SPAWN_MONSTER::factory() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_MONSTER.factory)
  return _internal_factory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SPAWN_MONSTER::set_factory(ArgT0&& arg0, ArgT... args) {
 
 _impl_.factory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SPAWN_MONSTER.factory)
}
inline std::string* C_SPAWN_MONSTER::mutable_factory() {
  std::string* _s = _internal_mutable_factory();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SPAWN_MONSTER.factory)
  return _s;
}
inline const std::string& C_SPAWN_MONSTER::_internal_factory() const {
  return _impl_.factory_.Get();
}
inline void C_SPAWN_MONSTER::_internal_set_factory(const std::string& value) {
  
  _impl_.factory_.Set(value, GetArenaForAllocation());
}
inline std::string* C_SPAWN_MONSTER::_internal_mutable_factory() {
  
  return _impl_.factory_.Mutable(GetArenaForAllocation());
}
inline std::string* C_SPAWN_MONSTER::release_factory() {
  // @@protoc_insertion_point(field_release:Protocol.C_SPAWN_MONSTER.factory)
  return _impl_.factory_.Release();
}
inline void C_SPAWN_MONSTER::set_allocated_factory(std::string* factory) {
  if (factory != nullptr) {
    
  } else {
    
  }
  _impl_.factory_.SetAllocated(factory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.factory_.IsDefault()) {
    _impl_.factory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SPAWN_MONSTER.factory)
}

// .Protocol.Matrix matrix = 3;
inline bool C_SPAWN_MONSTER::_internal_has_matrix() const {
  return this != internal_default_instance() && _impl_.matrix_ != nullptr;
}
inline bool C_SPAWN_MONSTER::has_matrix() const {
  return _internal_has_matrix();
}
inline const ::Protocol::Matrix& C_SPAWN_MONSTER::_internal_matrix() const {
  const ::Protocol::Matrix* p = _impl_.matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& C_SPAWN_MONSTER::matrix() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_MONSTER.matrix)
  return _internal_matrix();
}
inline void C_SPAWN_MONSTER::unsafe_arena_set_allocated_matrix(
    ::Protocol::Matrix* matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrix_);
  }
  _impl_.matrix_ = matrix;
  if (matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SPAWN_MONSTER.matrix)
}
inline ::Protocol::Matrix* C_SPAWN_MONSTER::release_matrix() {
  
  ::Protocol::Matrix* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* C_SPAWN_MONSTER::unsafe_arena_release_matrix() {
  // @@protoc_insertion_point(field_release:Protocol.C_SPAWN_MONSTER.matrix)
  
  ::Protocol::Matrix* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* C_SPAWN_MONSTER::_internal_mutable_matrix() {
  
  if (_impl_.matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matrix_ = p;
  }
  return _impl_.matrix_;
}
inline ::Protocol::Matrix* C_SPAWN_MONSTER::mutable_matrix() {
  ::Protocol::Matrix* _msg = _internal_mutable_matrix();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SPAWN_MONSTER.matrix)
  return _msg;
}
inline void C_SPAWN_MONSTER::set_allocated_matrix(::Protocol::Matrix* matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrix_);
  }
  if (matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrix));
    if (message_arena != submessage_arena) {
      matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matrix_ = matrix;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SPAWN_MONSTER.matrix)
}

// -------------------------------------------------------------------

// S_SPAWN_MONSTER

// bool success = 1;
inline void S_SPAWN_MONSTER::clear_success() {
  _impl_.success_ = false;
}
inline bool S_SPAWN_MONSTER::_internal_success() const {
  return _impl_.success_;
}
inline bool S_SPAWN_MONSTER::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_MONSTER.success)
  return _internal_success();
}
inline void S_SPAWN_MONSTER::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_SPAWN_MONSTER::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_MONSTER.success)
}

// uint32 id = 2;
inline void S_SPAWN_MONSTER::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t S_SPAWN_MONSTER::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t S_SPAWN_MONSTER::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_MONSTER.id)
  return _internal_id();
}
inline void S_SPAWN_MONSTER::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void S_SPAWN_MONSTER::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_MONSTER.id)
}

// string factory = 3;
inline void S_SPAWN_MONSTER::clear_factory() {
  _impl_.factory_.ClearToEmpty();
}
inline const std::string& S_SPAWN_MONSTER::factory() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_MONSTER.factory)
  return _internal_factory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SPAWN_MONSTER::set_factory(ArgT0&& arg0, ArgT... args) {
 
 _impl_.factory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_MONSTER.factory)
}
inline std::string* S_SPAWN_MONSTER::mutable_factory() {
  std::string* _s = _internal_mutable_factory();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_MONSTER.factory)
  return _s;
}
inline const std::string& S_SPAWN_MONSTER::_internal_factory() const {
  return _impl_.factory_.Get();
}
inline void S_SPAWN_MONSTER::_internal_set_factory(const std::string& value) {
  
  _impl_.factory_.Set(value, GetArenaForAllocation());
}
inline std::string* S_SPAWN_MONSTER::_internal_mutable_factory() {
  
  return _impl_.factory_.Mutable(GetArenaForAllocation());
}
inline std::string* S_SPAWN_MONSTER::release_factory() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_MONSTER.factory)
  return _impl_.factory_.Release();
}
inline void S_SPAWN_MONSTER::set_allocated_factory(std::string* factory) {
  if (factory != nullptr) {
    
  } else {
    
  }
  _impl_.factory_.SetAllocated(factory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.factory_.IsDefault()) {
    _impl_.factory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_MONSTER.factory)
}

// .Protocol.Matrix matrix = 4;
inline bool S_SPAWN_MONSTER::_internal_has_matrix() const {
  return this != internal_default_instance() && _impl_.matrix_ != nullptr;
}
inline bool S_SPAWN_MONSTER::has_matrix() const {
  return _internal_has_matrix();
}
inline const ::Protocol::Matrix& S_SPAWN_MONSTER::_internal_matrix() const {
  const ::Protocol::Matrix* p = _impl_.matrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& S_SPAWN_MONSTER::matrix() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_MONSTER.matrix)
  return _internal_matrix();
}
inline void S_SPAWN_MONSTER::unsafe_arena_set_allocated_matrix(
    ::Protocol::Matrix* matrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrix_);
  }
  _impl_.matrix_ = matrix;
  if (matrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_MONSTER.matrix)
}
inline ::Protocol::Matrix* S_SPAWN_MONSTER::release_matrix() {
  
  ::Protocol::Matrix* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* S_SPAWN_MONSTER::unsafe_arena_release_matrix() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_MONSTER.matrix)
  
  ::Protocol::Matrix* temp = _impl_.matrix_;
  _impl_.matrix_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* S_SPAWN_MONSTER::_internal_mutable_matrix() {
  
  if (_impl_.matrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matrix_ = p;
  }
  return _impl_.matrix_;
}
inline ::Protocol::Matrix* S_SPAWN_MONSTER::mutable_matrix() {
  ::Protocol::Matrix* _msg = _internal_mutable_matrix();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_MONSTER.matrix)
  return _msg;
}
inline void S_SPAWN_MONSTER::set_allocated_matrix(::Protocol::Matrix* matrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrix_);
  }
  if (matrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrix));
    if (message_arena != submessage_arena) {
      matrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matrix_ = matrix;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_MONSTER.matrix)
}

// -------------------------------------------------------------------

// C_MONSTER_SET_TARGET

// bool bAttack = 1;
inline void C_MONSTER_SET_TARGET::clear_battack() {
  _impl_.battack_ = false;
}
inline bool C_MONSTER_SET_TARGET::_internal_battack() const {
  return _impl_.battack_;
}
inline bool C_MONSTER_SET_TARGET::battack() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONSTER_SET_TARGET.bAttack)
  return _internal_battack();
}
inline void C_MONSTER_SET_TARGET::_internal_set_battack(bool value) {
  
  _impl_.battack_ = value;
}
inline void C_MONSTER_SET_TARGET::set_battack(bool value) {
  _internal_set_battack(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONSTER_SET_TARGET.bAttack)
}

// uint32 monsterID = 2;
inline void C_MONSTER_SET_TARGET::clear_monsterid() {
  _impl_.monsterid_ = 0u;
}
inline uint32_t C_MONSTER_SET_TARGET::_internal_monsterid() const {
  return _impl_.monsterid_;
}
inline uint32_t C_MONSTER_SET_TARGET::monsterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONSTER_SET_TARGET.monsterID)
  return _internal_monsterid();
}
inline void C_MONSTER_SET_TARGET::_internal_set_monsterid(uint32_t value) {
  
  _impl_.monsterid_ = value;
}
inline void C_MONSTER_SET_TARGET::set_monsterid(uint32_t value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONSTER_SET_TARGET.monsterID)
}

// uint32 playerID = 3;
inline void C_MONSTER_SET_TARGET::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t C_MONSTER_SET_TARGET::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t C_MONSTER_SET_TARGET::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONSTER_SET_TARGET.playerID)
  return _internal_playerid();
}
inline void C_MONSTER_SET_TARGET::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_MONSTER_SET_TARGET::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONSTER_SET_TARGET.playerID)
}

// -------------------------------------------------------------------

// S_MONSTER_SET_TARGET

// bool success = 1;
inline void S_MONSTER_SET_TARGET::clear_success() {
  _impl_.success_ = false;
}
inline bool S_MONSTER_SET_TARGET::_internal_success() const {
  return _impl_.success_;
}
inline bool S_MONSTER_SET_TARGET::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_SET_TARGET.success)
  return _internal_success();
}
inline void S_MONSTER_SET_TARGET::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_MONSTER_SET_TARGET::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_SET_TARGET.success)
}

// bool bAttack = 2;
inline void S_MONSTER_SET_TARGET::clear_battack() {
  _impl_.battack_ = false;
}
inline bool S_MONSTER_SET_TARGET::_internal_battack() const {
  return _impl_.battack_;
}
inline bool S_MONSTER_SET_TARGET::battack() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_SET_TARGET.bAttack)
  return _internal_battack();
}
inline void S_MONSTER_SET_TARGET::_internal_set_battack(bool value) {
  
  _impl_.battack_ = value;
}
inline void S_MONSTER_SET_TARGET::set_battack(bool value) {
  _internal_set_battack(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_SET_TARGET.bAttack)
}

// uint32 monsterID = 3;
inline void S_MONSTER_SET_TARGET::clear_monsterid() {
  _impl_.monsterid_ = 0u;
}
inline uint32_t S_MONSTER_SET_TARGET::_internal_monsterid() const {
  return _impl_.monsterid_;
}
inline uint32_t S_MONSTER_SET_TARGET::monsterid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_SET_TARGET.monsterID)
  return _internal_monsterid();
}
inline void S_MONSTER_SET_TARGET::_internal_set_monsterid(uint32_t value) {
  
  _impl_.monsterid_ = value;
}
inline void S_MONSTER_SET_TARGET::set_monsterid(uint32_t value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_SET_TARGET.monsterID)
}

// uint32 playerID = 4;
inline void S_MONSTER_SET_TARGET::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t S_MONSTER_SET_TARGET::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t S_MONSTER_SET_TARGET::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_SET_TARGET.playerID)
  return _internal_playerid();
}
inline void S_MONSTER_SET_TARGET::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_MONSTER_SET_TARGET::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_SET_TARGET.playerID)
}

// -------------------------------------------------------------------

// C_MONSTER_WORLD

// uint32 monsterID = 1;
inline void C_MONSTER_WORLD::clear_monsterid() {
  _impl_.monsterid_ = 0u;
}
inline uint32_t C_MONSTER_WORLD::_internal_monsterid() const {
  return _impl_.monsterid_;
}
inline uint32_t C_MONSTER_WORLD::monsterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONSTER_WORLD.monsterID)
  return _internal_monsterid();
}
inline void C_MONSTER_WORLD::_internal_set_monsterid(uint32_t value) {
  
  _impl_.monsterid_ = value;
}
inline void C_MONSTER_WORLD::set_monsterid(uint32_t value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MONSTER_WORLD.monsterID)
}

// .Protocol.Matrix matWorld = 2;
inline bool C_MONSTER_WORLD::_internal_has_matworld() const {
  return this != internal_default_instance() && _impl_.matworld_ != nullptr;
}
inline bool C_MONSTER_WORLD::has_matworld() const {
  return _internal_has_matworld();
}
inline const ::Protocol::Matrix& C_MONSTER_WORLD::_internal_matworld() const {
  const ::Protocol::Matrix* p = _impl_.matworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& C_MONSTER_WORLD::matworld() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MONSTER_WORLD.matWorld)
  return _internal_matworld();
}
inline void C_MONSTER_WORLD::unsafe_arena_set_allocated_matworld(
    ::Protocol::Matrix* matworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  _impl_.matworld_ = matworld;
  if (matworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MONSTER_WORLD.matWorld)
}
inline ::Protocol::Matrix* C_MONSTER_WORLD::release_matworld() {
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* C_MONSTER_WORLD::unsafe_arena_release_matworld() {
  // @@protoc_insertion_point(field_release:Protocol.C_MONSTER_WORLD.matWorld)
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* C_MONSTER_WORLD::_internal_mutable_matworld() {
  
  if (_impl_.matworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matworld_ = p;
  }
  return _impl_.matworld_;
}
inline ::Protocol::Matrix* C_MONSTER_WORLD::mutable_matworld() {
  ::Protocol::Matrix* _msg = _internal_mutable_matworld();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MONSTER_WORLD.matWorld)
  return _msg;
}
inline void C_MONSTER_WORLD::set_allocated_matworld(::Protocol::Matrix* matworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  if (matworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matworld));
    if (message_arena != submessage_arena) {
      matworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matworld_ = matworld;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MONSTER_WORLD.matWorld)
}

// -------------------------------------------------------------------

// S_MONSTER_WORLD

// bool success = 1;
inline void S_MONSTER_WORLD::clear_success() {
  _impl_.success_ = false;
}
inline bool S_MONSTER_WORLD::_internal_success() const {
  return _impl_.success_;
}
inline bool S_MONSTER_WORLD::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_WORLD.success)
  return _internal_success();
}
inline void S_MONSTER_WORLD::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_MONSTER_WORLD::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_WORLD.success)
}

// uint32 monsterID = 2;
inline void S_MONSTER_WORLD::clear_monsterid() {
  _impl_.monsterid_ = 0u;
}
inline uint32_t S_MONSTER_WORLD::_internal_monsterid() const {
  return _impl_.monsterid_;
}
inline uint32_t S_MONSTER_WORLD::monsterid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_WORLD.monsterID)
  return _internal_monsterid();
}
inline void S_MONSTER_WORLD::_internal_set_monsterid(uint32_t value) {
  
  _impl_.monsterid_ = value;
}
inline void S_MONSTER_WORLD::set_monsterid(uint32_t value) {
  _internal_set_monsterid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTER_WORLD.monsterID)
}

// .Protocol.Matrix matWorld = 3;
inline bool S_MONSTER_WORLD::_internal_has_matworld() const {
  return this != internal_default_instance() && _impl_.matworld_ != nullptr;
}
inline bool S_MONSTER_WORLD::has_matworld() const {
  return _internal_has_matworld();
}
inline const ::Protocol::Matrix& S_MONSTER_WORLD::_internal_matworld() const {
  const ::Protocol::Matrix* p = _impl_.matworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Matrix&>(
      ::Protocol::_Matrix_default_instance_);
}
inline const ::Protocol::Matrix& S_MONSTER_WORLD::matworld() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_WORLD.matWorld)
  return _internal_matworld();
}
inline void S_MONSTER_WORLD::unsafe_arena_set_allocated_matworld(
    ::Protocol::Matrix* matworld) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  _impl_.matworld_ = matworld;
  if (matworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MONSTER_WORLD.matWorld)
}
inline ::Protocol::Matrix* S_MONSTER_WORLD::release_matworld() {
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Matrix* S_MONSTER_WORLD::unsafe_arena_release_matworld() {
  // @@protoc_insertion_point(field_release:Protocol.S_MONSTER_WORLD.matWorld)
  
  ::Protocol::Matrix* temp = _impl_.matworld_;
  _impl_.matworld_ = nullptr;
  return temp;
}
inline ::Protocol::Matrix* S_MONSTER_WORLD::_internal_mutable_matworld() {
  
  if (_impl_.matworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Matrix>(GetArenaForAllocation());
    _impl_.matworld_ = p;
  }
  return _impl_.matworld_;
}
inline ::Protocol::Matrix* S_MONSTER_WORLD::mutable_matworld() {
  ::Protocol::Matrix* _msg = _internal_mutable_matworld();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MONSTER_WORLD.matWorld)
  return _msg;
}
inline void S_MONSTER_WORLD::set_allocated_matworld(::Protocol::Matrix* matworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matworld_);
  }
  if (matworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matworld));
    if (message_arena != submessage_arena) {
      matworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matworld, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matworld_ = matworld;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MONSTER_WORLD.matWorld)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
