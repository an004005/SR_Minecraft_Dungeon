// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized) {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_GAME::C_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.playerskin_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_GAMEDefaultTypeInternal() {}
  union {
    C_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.playerskin_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_OTHER_PLAYER::S_OTHER_PLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{}
  , /*decltype(_impl_.playerskin_)*/{}
  , /*decltype(_impl_._playerskin_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_OTHER_PLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_OTHER_PLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_OTHER_PLAYERDefaultTypeInternal() {}
  union {
    S_OTHER_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_OTHER_PLAYERDefaultTypeInternal _S_OTHER_PLAYER_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_INPUT::C_PLAYER_INPUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.inputbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_INPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_INPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_INPUTDefaultTypeInternal() {}
  union {
    C_PLAYER_INPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_INPUTDefaultTypeInternal _C_PLAYER_INPUT_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_INPUT::S_PLAYER_INPUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.inputbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_INPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_INPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_INPUTDefaultTypeInternal() {}
  union {
    S_PLAYER_INPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_INPUTDefaultTypeInternal _S_PLAYER_INPUT_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_WORLD::C_PLAYER_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_WORLDDefaultTypeInternal() {}
  union {
    C_PLAYER_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_WORLDDefaultTypeInternal _C_PLAYER_WORLD_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_WORLD::S_PLAYER_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_WORLDDefaultTypeInternal() {}
  union {
    S_PLAYER_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_WORLDDefaultTypeInternal _S_PLAYER_WORLD_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_YAW_ACTION::C_PLAYER_YAW_ACTION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_YAW_ACTIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_YAW_ACTIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_YAW_ACTIONDefaultTypeInternal() {}
  union {
    C_PLAYER_YAW_ACTION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_YAW_ACTIONDefaultTypeInternal _C_PLAYER_YAW_ACTION_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_YAW_ACTION::S_PLAYER_YAW_ACTION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_YAW_ACTIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_YAW_ACTIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_YAW_ACTIONDefaultTypeInternal() {}
  union {
    S_PLAYER_YAW_ACTION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_YAW_ACTIONDefaultTypeInternal _S_PLAYER_YAW_ACTION_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_ACTION::C_PLAYER_ACTION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_ACTIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_ACTIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_ACTIONDefaultTypeInternal() {}
  union {
    C_PLAYER_ACTION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_ACTIONDefaultTypeInternal _C_PLAYER_ACTION_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_ACTION::S_PLAYER_ACTION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_ACTIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_ACTIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_ACTIONDefaultTypeInternal() {}
  union {
    S_PLAYER_ACTION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_ACTIONDefaultTypeInternal _S_PLAYER_ACTION_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_ARROW::C_PLAYER_ARROW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.vlookat_)*/nullptr
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_ARROWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_ARROWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_ARROWDefaultTypeInternal() {}
  union {
    C_PLAYER_ARROW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_ARROWDefaultTypeInternal _C_PLAYER_ARROW_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_ARROW::S_PLAYER_ARROW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.vlookat_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.actionbit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_ARROWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_ARROWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_ARROWDefaultTypeInternal() {}
  union {
    S_PLAYER_ARROW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_ARROWDefaultTypeInternal _S_PLAYER_ARROW_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_EQUIP::C_PLAYER_EQUIP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_EQUIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_EQUIPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_EQUIPDefaultTypeInternal() {}
  union {
    C_PLAYER_EQUIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_EQUIPDefaultTypeInternal _C_PLAYER_EQUIP_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_EQUIP::S_PLAYER_EQUIP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_EQUIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_EQUIPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_EQUIPDefaultTypeInternal() {}
  union {
    S_PLAYER_EQUIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_EQUIPDefaultTypeInternal _S_PLAYER_EQUIP_default_instance_;
PROTOBUF_CONSTEXPR S_ALL_PLAYER_ENTER::S_ALL_PLAYER_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ALL_PLAYER_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ALL_PLAYER_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ALL_PLAYER_ENTERDefaultTypeInternal() {}
  union {
    S_ALL_PLAYER_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ALL_PLAYER_ENTERDefaultTypeInternal _S_ALL_PLAYER_ENTER_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_DEAD::C_PLAYER_DEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_DEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_DEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_DEADDefaultTypeInternal() {}
  union {
    C_PLAYER_DEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_DEADDefaultTypeInternal _C_PLAYER_DEAD_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_DEAD::S_PLAYER_DEAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_DEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_DEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_DEADDefaultTypeInternal() {}
  union {
    S_PLAYER_DEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_DEADDefaultTypeInternal _S_PLAYER_DEAD_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_RESPANW::C_PLAYER_RESPANW(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_RESPANWDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_RESPANWDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_RESPANWDefaultTypeInternal() {}
  union {
    C_PLAYER_RESPANW _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_RESPANWDefaultTypeInternal _C_PLAYER_RESPANW_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_RESPAWN::S_PLAYER_RESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_RESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_RESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_RESPAWNDefaultTypeInternal() {}
  union {
    S_PLAYER_RESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_RESPAWNDefaultTypeInternal _S_PLAYER_RESPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_MOVE_STAGE::C_PLAYER_MOVE_STAGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loadingtag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stagetag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_MOVE_STAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_MOVE_STAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_MOVE_STAGEDefaultTypeInternal() {}
  union {
    C_PLAYER_MOVE_STAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_MOVE_STAGEDefaultTypeInternal _C_PLAYER_MOVE_STAGE_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_MOVE_STAGE::S_PLAYER_MOVE_STAGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loadingtag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stagetag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_MOVE_STAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_MOVE_STAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_MOVE_STAGEDefaultTypeInternal() {}
  union {
    S_PLAYER_MOVE_STAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_MOVE_STAGEDefaultTypeInternal _S_PLAYER_MOVE_STAGE_default_instance_;
PROTOBUF_CONSTEXPR C_PLAYER_MOVE_STAGE_FINISH::C_PLAYER_MOVE_STAGE_FINISH(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.playerskin_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal() {}
  union {
    C_PLAYER_MOVE_STAGE_FINISH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal _C_PLAYER_MOVE_STAGE_FINISH_default_instance_;
PROTOBUF_CONSTEXPR S_PLAYER_MOVE_STAGE_FINISH::S_PLAYER_MOVE_STAGE_FINISH(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.playerskin_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal() {}
  union {
    S_PLAYER_MOVE_STAGE_FINISH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PLAYER_MOVE_STAGE_FINISHDefaultTypeInternal _S_PLAYER_MOVE_STAGE_FINISH_default_instance_;
PROTOBUF_CONSTEXPR C_SPAWN_MONSTER::C_SPAWN_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.factory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matrix_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SPAWN_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SPAWN_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SPAWN_MONSTERDefaultTypeInternal() {}
  union {
    C_SPAWN_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SPAWN_MONSTERDefaultTypeInternal _C_SPAWN_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN_MONSTER::S_SPAWN_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.factory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matrix_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWN_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWN_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWN_MONSTERDefaultTypeInternal() {}
  union {
    S_SPAWN_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWN_MONSTERDefaultTypeInternal _S_SPAWN_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR C_MONSTER_SET_TARGET::C_MONSTER_SET_TARGET(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.battack_)*/false
  , /*decltype(_impl_.monsterid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MONSTER_SET_TARGETDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MONSTER_SET_TARGETDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MONSTER_SET_TARGETDefaultTypeInternal() {}
  union {
    C_MONSTER_SET_TARGET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MONSTER_SET_TARGETDefaultTypeInternal _C_MONSTER_SET_TARGET_default_instance_;
PROTOBUF_CONSTEXPR S_MONSTER_SET_TARGET::S_MONSTER_SET_TARGET(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.battack_)*/false
  , /*decltype(_impl_.monsterid_)*/0u
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MONSTER_SET_TARGETDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MONSTER_SET_TARGETDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MONSTER_SET_TARGETDefaultTypeInternal() {}
  union {
    S_MONSTER_SET_TARGET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MONSTER_SET_TARGETDefaultTypeInternal _S_MONSTER_SET_TARGET_default_instance_;
PROTOBUF_CONSTEXPR C_MONSTER_WORLD::C_MONSTER_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_.monsterid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MONSTER_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MONSTER_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MONSTER_WORLDDefaultTypeInternal() {}
  union {
    C_MONSTER_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MONSTER_WORLDDefaultTypeInternal _C_MONSTER_WORLD_default_instance_;
PROTOBUF_CONSTEXPR S_MONSTER_WORLD::S_MONSTER_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.monsterid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MONSTER_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MONSTER_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MONSTER_WORLDDefaultTypeInternal() {}
  union {
    S_MONSTER_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MONSTER_WORLDDefaultTypeInternal _S_MONSTER_WORLD_default_instance_;
PROTOBUF_CONSTEXPR C_BOSS_SPAWN::C_BOSS_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.factory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matrix_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BOSS_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BOSS_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BOSS_SPAWNDefaultTypeInternal() {}
  union {
    C_BOSS_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BOSS_SPAWNDefaultTypeInternal _C_BOSS_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_BOSS_SPAWN::S_BOSS_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.factory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matrix_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BOSS_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BOSS_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BOSS_SPAWNDefaultTypeInternal() {}
  union {
    S_BOSS_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BOSS_SPAWNDefaultTypeInternal _S_BOSS_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_BOSS_WORLD::C_BOSS_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_.ihp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_BOSS_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BOSS_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BOSS_WORLDDefaultTypeInternal() {}
  union {
    C_BOSS_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BOSS_WORLDDefaultTypeInternal _C_BOSS_WORLD_default_instance_;
PROTOBUF_CONSTEXPR S_BOSS_WORLD::S_BOSS_WORLD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matworld_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.ihp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_BOSS_WORLDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BOSS_WORLDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BOSS_WORLDDefaultTypeInternal() {}
  union {
    S_BOSS_WORLD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BOSS_WORLDDefaultTypeInternal _S_BOSS_WORLD_default_instance_;
PROTOBUF_CONSTEXPR C_SATON_ATTACK::C_SATON_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetpos_)*/nullptr
  , /*decltype(_impl_.pattern_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SATON_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SATON_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SATON_ATTACKDefaultTypeInternal() {}
  union {
    C_SATON_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SATON_ATTACKDefaultTypeInternal _C_SATON_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR S_SATON_ATTACK::S_SATON_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetpos_)*/nullptr
  , /*decltype(_impl_.bosspos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.pattern_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SATON_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SATON_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SATON_ATTACKDefaultTypeInternal() {}
  union {
    S_SATON_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SATON_ATTACKDefaultTypeInternal _S_SATON_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_KOUKU_ATTACK::C_KOUKU_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetpos_)*/nullptr
  , /*decltype(_impl_.pattern_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_KOUKU_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_KOUKU_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_KOUKU_ATTACKDefaultTypeInternal() {}
  union {
    C_KOUKU_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_KOUKU_ATTACKDefaultTypeInternal _C_KOUKU_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR S_KOUKU_ATTACK::S_KOUKU_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetpos_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.pattern_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_KOUKU_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_KOUKU_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_KOUKU_ATTACKDefaultTypeInternal() {}
  union {
    S_KOUKU_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_KOUKU_ATTACKDefaultTypeInternal _S_KOUKU_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_KOUKU_COUNTER::C_KOUKU_COUNTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_KOUKU_COUNTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_KOUKU_COUNTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_KOUKU_COUNTERDefaultTypeInternal() {}
  union {
    C_KOUKU_COUNTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_KOUKU_COUNTERDefaultTypeInternal _C_KOUKU_COUNTER_default_instance_;
PROTOBUF_CONSTEXPR S_KOUKU_COUNTER::S_KOUKU_COUNTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_KOUKU_COUNTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_KOUKU_COUNTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_KOUKU_COUNTERDefaultTypeInternal() {}
  union {
    S_KOUKU_COUNTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_KOUKU_COUNTERDefaultTypeInternal _S_KOUKU_COUNTER_default_instance_;
PROTOBUF_CONSTEXPR C_DEBUG_PKT::C_DEBUG_PKT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debuglog_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_DEBUG_PKTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DEBUG_PKTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DEBUG_PKTDefaultTypeInternal() {}
  union {
    C_DEBUG_PKT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DEBUG_PKTDefaultTypeInternal _C_DEBUG_PKT_default_instance_;
PROTOBUF_CONSTEXPR C_KOUKU_DAMAGE::C_KOUKU_DAMAGE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_KOUKU_DAMAGEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_KOUKU_DAMAGEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_KOUKU_DAMAGEDefaultTypeInternal() {}
  union {
    C_KOUKU_DAMAGE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_KOUKU_DAMAGEDefaultTypeInternal _C_KOUKU_DAMAGE_default_instance_;
PROTOBUF_CONSTEXPR C_KOUKU_RESULT::C_KOUKU_RESULT(
    ::_pbi::ConstantInitialized) {}
struct C_KOUKU_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_KOUKU_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_KOUKU_RESULTDefaultTypeInternal() {}
  union {
    C_KOUKU_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_KOUKU_RESULTDefaultTypeInternal _C_KOUKU_RESULT_default_instance_;
PROTOBUF_CONSTEXPR S_KOUKU_RESULT::S_KOUKU_RESULT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_KOUKU_RESULTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_KOUKU_RESULTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_KOUKU_RESULTDefaultTypeInternal() {}
  union {
    S_KOUKU_RESULT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_KOUKU_RESULTDefaultTypeInternal _S_KOUKU_RESULT_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[46];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.playerskin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.playerskin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OTHER_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OTHER_PLAYER, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OTHER_PLAYER, _impl_.playerskin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_INPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_INPUT, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_INPUT, _impl_.inputbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_INPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_INPUT, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_INPUT, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_INPUT, _impl_.inputbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_WORLD, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_WORLD, _impl_.matworld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_WORLD, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_WORLD, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_WORLD, _impl_.matworld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_YAW_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_YAW_ACTION, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_YAW_ACTION, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_YAW_ACTION, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_YAW_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_YAW_ACTION, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_YAW_ACTION, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_YAW_ACTION, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_YAW_ACTION, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ACTION, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ACTION, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ARROW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ARROW, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ARROW, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ARROW, _impl_.vlookat_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_ARROW, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _impl_.vlookat_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_ARROW, _impl_.actionbit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_EQUIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_EQUIP, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_EQUIP, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EQUIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EQUIP, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EQUIP, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_EQUIP, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ALL_PLAYER_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ALL_PLAYER_ENTER, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_DEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_DEAD, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_DEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_DEAD, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_DEAD, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_RESPANW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_RESPANW, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_RESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_RESPAWN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_RESPAWN, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE, _impl_.loadingtag_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE, _impl_.stagetag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE, _impl_.loadingtag_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE, _impl_.stagetag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE_FINISH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE_FINISH, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PLAYER_MOVE_STAGE_FINISH, _impl_.playerskin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE_FINISH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE_FINISH, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYER_MOVE_STAGE_FINISH, _impl_.playerskin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_MONSTER, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_MONSTER, _impl_.factory_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_MONSTER, _impl_.matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_MONSTER, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_MONSTER, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_MONSTER, _impl_.factory_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_MONSTER, _impl_.matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_SET_TARGET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_SET_TARGET, _impl_.battack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_SET_TARGET, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_SET_TARGET, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_SET_TARGET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_SET_TARGET, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_SET_TARGET, _impl_.battack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_SET_TARGET, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_SET_TARGET, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_WORLD, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MONSTER_WORLD, _impl_.matworld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_WORLD, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_WORLD, _impl_.monsterid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTER_WORLD, _impl_.matworld_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_SPAWN, _impl_.factory_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_SPAWN, _impl_.matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_SPAWN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_SPAWN, _impl_.factory_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_SPAWN, _impl_.matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_WORLD, _impl_.objkey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_WORLD, _impl_.matworld_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOSS_WORLD, _impl_.ihp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_WORLD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_WORLD, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_WORLD, _impl_.objkey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_WORLD, _impl_.matworld_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOSS_WORLD, _impl_.ihp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SATON_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SATON_ATTACK, _impl_.pattern_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SATON_ATTACK, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SATON_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SATON_ATTACK, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SATON_ATTACK, _impl_.pattern_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SATON_ATTACK, _impl_.targetpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SATON_ATTACK, _impl_.bosspos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_ATTACK, _impl_.pattern_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_ATTACK, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_ATTACK, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_ATTACK, _impl_.pattern_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_ATTACK, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_COUNTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_COUNTER, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_COUNTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_COUNTER, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DEBUG_PKT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DEBUG_PKT, _impl_.debuglog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_DAMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_DAMAGE, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_DAMAGE, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_KOUKU_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_RESULT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_RESULT, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_KOUKU_RESULT, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 6, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 14, -1, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 22, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 31, -1, -1, sizeof(::Protocol::S_OTHER_PLAYER)},
  { 39, -1, -1, sizeof(::Protocol::C_PLAYER_INPUT)},
  { 47, -1, -1, sizeof(::Protocol::S_PLAYER_INPUT)},
  { 56, -1, -1, sizeof(::Protocol::C_PLAYER_WORLD)},
  { 64, -1, -1, sizeof(::Protocol::S_PLAYER_WORLD)},
  { 73, -1, -1, sizeof(::Protocol::C_PLAYER_YAW_ACTION)},
  { 82, -1, -1, sizeof(::Protocol::S_PLAYER_YAW_ACTION)},
  { 92, -1, -1, sizeof(::Protocol::C_PLAYER_ACTION)},
  { 100, -1, -1, sizeof(::Protocol::S_PLAYER_ACTION)},
  { 109, -1, -1, sizeof(::Protocol::C_PLAYER_ARROW)},
  { 119, -1, -1, sizeof(::Protocol::S_PLAYER_ARROW)},
  { 130, -1, -1, sizeof(::Protocol::C_PLAYER_EQUIP)},
  { 138, -1, -1, sizeof(::Protocol::S_PLAYER_EQUIP)},
  { 147, -1, -1, sizeof(::Protocol::S_ALL_PLAYER_ENTER)},
  { 154, -1, -1, sizeof(::Protocol::C_PLAYER_DEAD)},
  { 161, -1, -1, sizeof(::Protocol::S_PLAYER_DEAD)},
  { 169, -1, -1, sizeof(::Protocol::C_PLAYER_RESPANW)},
  { 176, -1, -1, sizeof(::Protocol::S_PLAYER_RESPAWN)},
  { 184, -1, -1, sizeof(::Protocol::C_PLAYER_MOVE_STAGE)},
  { 192, -1, -1, sizeof(::Protocol::S_PLAYER_MOVE_STAGE)},
  { 201, -1, -1, sizeof(::Protocol::C_PLAYER_MOVE_STAGE_FINISH)},
  { 209, -1, -1, sizeof(::Protocol::S_PLAYER_MOVE_STAGE_FINISH)},
  { 217, -1, -1, sizeof(::Protocol::C_SPAWN_MONSTER)},
  { 226, -1, -1, sizeof(::Protocol::S_SPAWN_MONSTER)},
  { 236, -1, -1, sizeof(::Protocol::C_MONSTER_SET_TARGET)},
  { 245, -1, -1, sizeof(::Protocol::S_MONSTER_SET_TARGET)},
  { 255, -1, -1, sizeof(::Protocol::C_MONSTER_WORLD)},
  { 263, -1, -1, sizeof(::Protocol::S_MONSTER_WORLD)},
  { 272, -1, -1, sizeof(::Protocol::C_BOSS_SPAWN)},
  { 280, -1, -1, sizeof(::Protocol::S_BOSS_SPAWN)},
  { 289, -1, -1, sizeof(::Protocol::C_BOSS_WORLD)},
  { 298, -1, -1, sizeof(::Protocol::S_BOSS_WORLD)},
  { 308, -1, -1, sizeof(::Protocol::C_SATON_ATTACK)},
  { 316, -1, -1, sizeof(::Protocol::S_SATON_ATTACK)},
  { 326, -1, -1, sizeof(::Protocol::C_KOUKU_ATTACK)},
  { 334, -1, -1, sizeof(::Protocol::S_KOUKU_ATTACK)},
  { 343, -1, -1, sizeof(::Protocol::C_KOUKU_COUNTER)},
  { 350, -1, -1, sizeof(::Protocol::S_KOUKU_COUNTER)},
  { 357, -1, -1, sizeof(::Protocol::C_DEBUG_PKT)},
  { 364, -1, -1, sizeof(::Protocol::C_KOUKU_DAMAGE)},
  { 372, -1, -1, sizeof(::Protocol::C_KOUKU_RESULT)},
  { 378, -1, -1, sizeof(::Protocol::S_KOUKU_RESULT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_OTHER_PLAYER_default_instance_._instance,
  &::Protocol::_C_PLAYER_INPUT_default_instance_._instance,
  &::Protocol::_S_PLAYER_INPUT_default_instance_._instance,
  &::Protocol::_C_PLAYER_WORLD_default_instance_._instance,
  &::Protocol::_S_PLAYER_WORLD_default_instance_._instance,
  &::Protocol::_C_PLAYER_YAW_ACTION_default_instance_._instance,
  &::Protocol::_S_PLAYER_YAW_ACTION_default_instance_._instance,
  &::Protocol::_C_PLAYER_ACTION_default_instance_._instance,
  &::Protocol::_S_PLAYER_ACTION_default_instance_._instance,
  &::Protocol::_C_PLAYER_ARROW_default_instance_._instance,
  &::Protocol::_S_PLAYER_ARROW_default_instance_._instance,
  &::Protocol::_C_PLAYER_EQUIP_default_instance_._instance,
  &::Protocol::_S_PLAYER_EQUIP_default_instance_._instance,
  &::Protocol::_S_ALL_PLAYER_ENTER_default_instance_._instance,
  &::Protocol::_C_PLAYER_DEAD_default_instance_._instance,
  &::Protocol::_S_PLAYER_DEAD_default_instance_._instance,
  &::Protocol::_C_PLAYER_RESPANW_default_instance_._instance,
  &::Protocol::_S_PLAYER_RESPAWN_default_instance_._instance,
  &::Protocol::_C_PLAYER_MOVE_STAGE_default_instance_._instance,
  &::Protocol::_S_PLAYER_MOVE_STAGE_default_instance_._instance,
  &::Protocol::_C_PLAYER_MOVE_STAGE_FINISH_default_instance_._instance,
  &::Protocol::_S_PLAYER_MOVE_STAGE_FINISH_default_instance_._instance,
  &::Protocol::_C_SPAWN_MONSTER_default_instance_._instance,
  &::Protocol::_S_SPAWN_MONSTER_default_instance_._instance,
  &::Protocol::_C_MONSTER_SET_TARGET_default_instance_._instance,
  &::Protocol::_S_MONSTER_SET_TARGET_default_instance_._instance,
  &::Protocol::_C_MONSTER_WORLD_default_instance_._instance,
  &::Protocol::_S_MONSTER_WORLD_default_instance_._instance,
  &::Protocol::_C_BOSS_SPAWN_default_instance_._instance,
  &::Protocol::_S_BOSS_SPAWN_default_instance_._instance,
  &::Protocol::_C_BOSS_WORLD_default_instance_._instance,
  &::Protocol::_S_BOSS_WORLD_default_instance_._instance,
  &::Protocol::_C_SATON_ATTACK_default_instance_._instance,
  &::Protocol::_S_SATON_ATTACK_default_instance_._instance,
  &::Protocol::_C_KOUKU_ATTACK_default_instance_._instance,
  &::Protocol::_S_KOUKU_ATTACK_default_instance_._instance,
  &::Protocol::_C_KOUKU_COUNTER_default_instance_._instance,
  &::Protocol::_S_KOUKU_COUNTER_default_instance_._instance,
  &::Protocol::_C_DEBUG_PKT_default_instance_._instance,
  &::Protocol::_C_KOUKU_DAMAGE_default_instance_._instance,
  &::Protocol::_C_KOUKU_RESULT_default_instance_._instance,
  &::Protocol::_S_KOUKU_RESULT_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\t\n\007C_LOGIN\",\n\007S_LOGIN\022\017\n\007su"
  "ccess\030\001 \001(\010\022\020\n\010playerID\030\002 \001(\r\"Z\n\014C_ENTER"
  "_GAME\022 \n\006player\030\001 \001(\0132\020.Protocol.Player\022"
  "(\n\nplayerSkin\030\002 \001(\0162\024.Protocol.PlayerSki"
  "n\"k\n\014S_ENTER_GAME\022\017\n\007success\030\001 \001(\010\022 \n\006pl"
  "ayer\030\002 \001(\0132\020.Protocol.Player\022(\n\nplayerSk"
  "in\030\003 \001(\0162\024.Protocol.PlayerSkin\"\\\n\016S_OTHE"
  "R_PLAYER\022 \n\006player\030\001 \003(\0132\020.Protocol.Play"
  "er\022(\n\nplayerSkin\030\002 \003(\0162\024.Protocol.Player"
  "Skin\"D\n\016C_PLAYER_INPUT\022 \n\006player\030\001 \001(\0132\020"
  ".Protocol.Player\022\020\n\010inputBit\030\002 \001(\r\"U\n\016S_"
  "PLAYER_INPUT\022\017\n\007success\030\001 \001(\010\022 \n\006player\030"
  "\002 \001(\0132\020.Protocol.Player\022\020\n\010inputBit\030\003 \001("
  "\r\"V\n\016C_PLAYER_WORLD\022 \n\006player\030\001 \001(\0132\020.Pr"
  "otocol.Player\022\"\n\010matWorld\030\002 \001(\0132\020.Protoc"
  "ol.Matrix\"g\n\016S_PLAYER_WORLD\022\017\n\007success\030\001"
  " \001(\010\022 \n\006player\030\002 \001(\0132\020.Protocol.Player\022\""
  "\n\010matWorld\030\003 \001(\0132\020.Protocol.Matrix\"W\n\023C_"
  "PLAYER_YAW_ACTION\022 \n\006player\030\001 \001(\0132\020.Prot"
  "ocol.Player\022\013\n\003yaw\030\002 \001(\002\022\021\n\tactionBit\030\003 "
  "\001(\r\"h\n\023S_PLAYER_YAW_ACTION\022\017\n\007success\030\001 "
  "\001(\010\022 \n\006player\030\002 \001(\0132\020.Protocol.Player\022\013\n"
  "\003yaw\030\003 \001(\002\022\021\n\tactionBit\030\004 \001(\r\"F\n\017C_PLAYE"
  "R_ACTION\022 \n\006player\030\001 \001(\0132\020.Protocol.Play"
  "er\022\021\n\tactionBit\030\002 \001(\r\"W\n\017S_PLAYER_ACTION"
  "\022\017\n\007success\030\001 \001(\010\022 \n\006player\030\002 \001(\0132\020.Prot"
  "ocol.Player\022\021\n\tactionBit\030\003 \001(\r\"s\n\016C_PLAY"
  "ER_ARROW\022 \n\006player\030\001 \001(\0132\020.Protocol.Play"
  "er\022\013\n\003yaw\030\002 \001(\002\022\037\n\007vLookAt\030\003 \001(\0132\016.Proto"
  "col.Vec3\022\021\n\tactionBit\030\004 \001(\r\"\204\001\n\016S_PLAYER"
  "_ARROW\022\017\n\007success\030\001 \001(\010\022 \n\006player\030\002 \001(\0132"
  "\020.Protocol.Player\022\013\n\003yaw\030\003 \001(\002\022\037\n\007vLookA"
  "t\030\004 \001(\0132\016.Protocol.Vec3\022\021\n\tactionBit\030\005 \001"
  "(\r\"W\n\016C_PLAYER_EQUIP\022 \n\006player\030\001 \001(\0132\020.P"
  "rotocol.Player\022#\n\005state\030\002 \001(\0132\024.Protocol"
  ".EquipState\"h\n\016S_PLAYER_EQUIP\022\017\n\007success"
  "\030\001 \001(\010\022 \n\006player\030\002 \001(\0132\020.Protocol.Player"
  "\022#\n\005state\030\003 \001(\0132\024.Protocol.EquipState\"%\n"
  "\022S_ALL_PLAYER_ENTER\022\017\n\007success\030\001 \001(\010\"1\n\r"
  "C_PLAYER_DEAD\022 \n\006player\030\001 \001(\0132\020.Protocol"
  ".Player\"B\n\rS_PLAYER_DEAD\022\017\n\007success\030\001 \001("
  "\010\022 \n\006player\030\002 \001(\0132\020.Protocol.Player\"4\n\020C"
  "_PLAYER_RESPANW\022 \n\006player\030\001 \001(\0132\020.Protoc"
  "ol.Player\"E\n\020S_PLAYER_RESPAWN\022\017\n\007success"
  "\030\001 \001(\010\022 \n\006player\030\002 \001(\0132\020.Protocol.Player"
  "\";\n\023C_PLAYER_MOVE_STAGE\022\022\n\nloadingTag\030\001 "
  "\001(\t\022\020\n\010stageTag\030\002 \001(\t\"L\n\023S_PLAYER_MOVE_S"
  "TAGE\022\017\n\007success\030\001 \001(\010\022\022\n\nloadingTag\030\002 \001("
  "\t\022\020\n\010stageTag\030\003 \001(\t\"h\n\032C_PLAYER_MOVE_STA"
  "GE_FINISH\022 \n\006player\030\001 \001(\0132\020.Protocol.Pla"
  "yer\022(\n\nplayerSkin\030\002 \001(\0162\024.Protocol.Playe"
  "rSkin\"h\n\032S_PLAYER_MOVE_STAGE_FINISH\022 \n\006p"
  "layer\030\001 \001(\0132\020.Protocol.Player\022(\n\nplayerS"
  "kin\030\002 \001(\0162\024.Protocol.PlayerSkin\"P\n\017C_SPA"
  "WN_MONSTER\022\n\n\002id\030\001 \001(\r\022\017\n\007factory\030\002 \001(\t\022"
  " \n\006matrix\030\003 \001(\0132\020.Protocol.Matrix\"a\n\017S_S"
  "PAWN_MONSTER\022\017\n\007success\030\001 \001(\010\022\n\n\002id\030\002 \001("
  "\r\022\017\n\007factory\030\003 \001(\t\022 \n\006matrix\030\004 \001(\0132\020.Pro"
  "tocol.Matrix\"L\n\024C_MONSTER_SET_TARGET\022\017\n\007"
  "bAttack\030\001 \001(\010\022\021\n\tmonsterID\030\002 \001(\r\022\020\n\010play"
  "erID\030\003 \001(\r\"]\n\024S_MONSTER_SET_TARGET\022\017\n\007su"
  "ccess\030\001 \001(\010\022\017\n\007bAttack\030\002 \001(\010\022\021\n\tmonsterI"
  "D\030\003 \001(\r\022\020\n\010playerID\030\004 \001(\r\"H\n\017C_MONSTER_W"
  "ORLD\022\021\n\tmonsterID\030\001 \001(\r\022\"\n\010matWorld\030\002 \001("
  "\0132\020.Protocol.Matrix\"Y\n\017S_MONSTER_WORLD\022\017"
  "\n\007success\030\001 \001(\010\022\021\n\tmonsterID\030\002 \001(\r\022\"\n\010ma"
  "tWorld\030\003 \001(\0132\020.Protocol.Matrix\"A\n\014C_BOSS"
  "_SPAWN\022\017\n\007factory\030\001 \001(\t\022 \n\006matrix\030\003 \001(\0132"
  "\020.Protocol.Matrix\"R\n\014S_BOSS_SPAWN\022\017\n\007suc"
  "cess\030\001 \001(\010\022\017\n\007factory\030\002 \001(\t\022 \n\006matrix\030\003 "
  "\001(\0132\020.Protocol.Matrix\"O\n\014C_BOSS_WORLD\022\016\n"
  "\006objKey\030\001 \001(\t\022\"\n\010matWorld\030\002 \001(\0132\020.Protoc"
  "ol.Matrix\022\013\n\003iHP\030\003 \001(\r\"`\n\014S_BOSS_WORLD\022\017"
  "\n\007success\030\001 \001(\010\022\016\n\006objKey\030\002 \001(\t\022\"\n\010matWo"
  "rld\030\003 \001(\0132\020.Protocol.Matrix\022\013\n\003iHP\030\004 \001(\r"
  "\"\\\n\016C_SATON_ATTACK\022\'\n\007pattern\030\001 \001(\0162\026.Pr"
  "otocol.SatonPattern\022!\n\ttargetPos\030\002 \001(\0132\016"
  ".Protocol.Vec3\"\216\001\n\016S_SATON_ATTACK\022\017\n\007suc"
  "cess\030\001 \001(\010\022\'\n\007pattern\030\002 \001(\0162\026.Protocol.S"
  "atonPattern\022!\n\ttargetPos\030\003 \001(\0132\016.Protoco"
  "l.Vec3\022\037\n\007BossPos\030\004 \001(\0132\016.Protocol.Vec3\""
  "\\\n\016C_KOUKU_ATTACK\022\'\n\007pattern\030\001 \001(\0162\026.Pro"
  "tocol.KoukuPattern\022!\n\ttargetPos\030\002 \001(\0132\016."
  "Protocol.Vec3\"m\n\016S_KOUKU_ATTACK\022\017\n\007succe"
  "ss\030\001 \001(\010\022\'\n\007pattern\030\002 \001(\0162\026.Protocol.Kou"
  "kuPattern\022!\n\ttargetPos\030\003 \001(\0132\016.Protocol."
  "Vec3\"3\n\017C_KOUKU_COUNTER\022 \n\006player\030\001 \001(\0132"
  "\020.Protocol.Player\"\"\n\017S_KOUKU_COUNTER\022\017\n\007"
  "success\030\001 \001(\010\"\037\n\013C_DEBUG_PKT\022\020\n\010debugLog"
  "\030\001 \001(\t\"B\n\016C_KOUKU_DAMAGE\022 \n\006player\030\001 \001(\013"
  "2\020.Protocol.Player\022\016\n\006damage\030\002 \001(\r\"\020\n\016C_"
  "KOUKU_RESULT\"I\n\016S_KOUKU_RESULT\022\017\n\007succes"
  "s\030\001 \001(\010\022&\n\006result\030\002 \003(\0132\026.Protocol.Playe"
  "rResultb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 3775, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 46,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LOGIN* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 playerID = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 playerID = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.playerid_)
      + sizeof(S_LOGIN::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::Player& player(const C_ENTER_GAME* msg);
};

const ::Protocol::Player&
C_ENTER_GAME::_Internal::player(const C_ENTER_GAME* msg) {
  return *msg->_impl_.player_;
}
void C_ENTER_GAME::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
}
C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.playerskin_ = from._impl_.playerskin_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
}

inline void C_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENTER_GAME::~C_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.playerskin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSkin playerSkin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playerskin(static_cast<::Protocol::PlayerSkin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerskin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
  return target;
}

size_t C_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerskin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_GAME::GetClassData() const { return &_class_data_; }


void C_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const C_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_playerskin() != 0) {
    _this->_internal_set_playerskin(from._internal_playerskin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_GAME::IsInitialized() const {
  return true;
}

void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ENTER_GAME, _impl_.playerskin_)
      + sizeof(C_ENTER_GAME::_impl_.playerskin_)
      - PROTOBUF_FIELD_OFFSET(C_ENTER_GAME, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::Player& player(const S_ENTER_GAME* msg);
};

const ::Protocol::Player&
S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
  return *msg->_impl_.player_;
}
void S_ENTER_GAME::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.playerskin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerskin_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerskin_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

inline void S_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.playerskin_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerskin_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerskin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSkin playerSkin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playerskin(static_cast<::Protocol::PlayerSkin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSkin playerSkin = 3;
  if (this->_internal_playerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_playerskin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.PlayerSkin playerSkin = 3;
  if (this->_internal_playerskin() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerskin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_GAME::GetClassData() const { return &_class_data_; }


void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_playerskin() != 0) {
    _this->_internal_set_playerskin(from._internal_playerskin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.playerskin_)
      + sizeof(S_ENTER_GAME::_impl_.playerskin_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_OTHER_PLAYER::_Internal {
 public:
};

void S_OTHER_PLAYER::clear_player() {
  _impl_.player_.Clear();
}
S_OTHER_PLAYER::S_OTHER_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OTHER_PLAYER)
}
S_OTHER_PLAYER::S_OTHER_PLAYER(const S_OTHER_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_OTHER_PLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){from._impl_.player_}
    , decltype(_impl_.playerskin_){from._impl_.playerskin_}
    , /*decltype(_impl_._playerskin_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OTHER_PLAYER)
}

inline void S_OTHER_PLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){arena}
    , decltype(_impl_.playerskin_){arena}
    , /*decltype(_impl_._playerskin_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_OTHER_PLAYER::~S_OTHER_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_OTHER_PLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_OTHER_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.~RepeatedPtrField();
  _impl_.playerskin_.~RepeatedField();
}

void S_OTHER_PLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_OTHER_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OTHER_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.Clear();
  _impl_.playerskin_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OTHER_PLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerSkin playerSkin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_playerskin(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_playerskin(static_cast<::Protocol::PlayerSkin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_OTHER_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OTHER_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.Player player = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_size()); i < n; i++) {
    const auto& repfield = this->_internal_player(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.PlayerSkin playerSkin = 2;
  {
    int byte_size = _impl_._playerskin_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.playerskin_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OTHER_PLAYER)
  return target;
}

size_t S_OTHER_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OTHER_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.Player player = 1;
  total_size += 1UL * this->_internal_player_size();
  for (const auto& msg : this->_impl_.player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.PlayerSkin playerSkin = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_playerskin_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_playerskin(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._playerskin_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_OTHER_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_OTHER_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_OTHER_PLAYER::GetClassData() const { return &_class_data_; }


void S_OTHER_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_OTHER_PLAYER*>(&to_msg);
  auto& from = static_cast<const S_OTHER_PLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OTHER_PLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_.MergeFrom(from._impl_.player_);
  _this->_impl_.playerskin_.MergeFrom(from._impl_.playerskin_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_OTHER_PLAYER::CopyFrom(const S_OTHER_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OTHER_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OTHER_PLAYER::IsInitialized() const {
  return true;
}

void S_OTHER_PLAYER::InternalSwap(S_OTHER_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_.InternalSwap(&other->_impl_.player_);
  _impl_.playerskin_.InternalSwap(&other->_impl_.playerskin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OTHER_PLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C_PLAYER_INPUT::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_INPUT* msg);
};

const ::Protocol::Player&
C_PLAYER_INPUT::_Internal::player(const C_PLAYER_INPUT* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_INPUT::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_INPUT::C_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_INPUT)
}
C_PLAYER_INPUT::C_PLAYER_INPUT(const C_PLAYER_INPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_INPUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.inputbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.inputbit_ = from._impl_.inputbit_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_INPUT)
}

inline void C_PLAYER_INPUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.inputbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_INPUT::~C_PLAYER_INPUT() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_INPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_INPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_INPUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_INPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_INPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.inputbit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_INPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inputBit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.inputbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_INPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_INPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint32 inputBit = 2;
  if (this->_internal_inputbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_inputbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_INPUT)
  return target;
}

size_t C_PLAYER_INPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_INPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 inputBit = 2;
  if (this->_internal_inputbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inputbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_INPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_INPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_INPUT::GetClassData() const { return &_class_data_; }


void C_PLAYER_INPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_INPUT*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_INPUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_INPUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_inputbit() != 0) {
    _this->_internal_set_inputbit(from._internal_inputbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_INPUT::CopyFrom(const C_PLAYER_INPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_INPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_INPUT::IsInitialized() const {
  return true;
}

void C_PLAYER_INPUT::InternalSwap(C_PLAYER_INPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_INPUT, _impl_.inputbit_)
      + sizeof(C_PLAYER_INPUT::_impl_.inputbit_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_INPUT, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_INPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_PLAYER_INPUT::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_INPUT* msg);
};

const ::Protocol::Player&
S_PLAYER_INPUT::_Internal::player(const S_PLAYER_INPUT* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_INPUT::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_INPUT::S_PLAYER_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_INPUT)
}
S_PLAYER_INPUT::S_PLAYER_INPUT(const S_PLAYER_INPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_INPUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.inputbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inputbit_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.inputbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_INPUT)
}

inline void S_PLAYER_INPUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.inputbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_INPUT::~S_PLAYER_INPUT() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_INPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_INPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_INPUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_INPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_INPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inputbit_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.inputbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_INPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inputBit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inputbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_INPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_INPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint32 inputBit = 3;
  if (this->_internal_inputbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_inputbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_INPUT)
  return target;
}

size_t S_PLAYER_INPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_INPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 inputBit = 3;
  if (this->_internal_inputbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inputbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_INPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_INPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_INPUT::GetClassData() const { return &_class_data_; }


void S_PLAYER_INPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_INPUT*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_INPUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_INPUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_inputbit() != 0) {
    _this->_internal_set_inputbit(from._internal_inputbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_INPUT::CopyFrom(const S_PLAYER_INPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_INPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_INPUT::IsInitialized() const {
  return true;
}

void S_PLAYER_INPUT::InternalSwap(S_PLAYER_INPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_INPUT, _impl_.inputbit_)
      + sizeof(S_PLAYER_INPUT::_impl_.inputbit_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_INPUT, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_INPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class C_PLAYER_WORLD::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_WORLD* msg);
  static const ::Protocol::Matrix& matworld(const C_PLAYER_WORLD* msg);
};

const ::Protocol::Player&
C_PLAYER_WORLD::_Internal::player(const C_PLAYER_WORLD* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::Matrix&
C_PLAYER_WORLD::_Internal::matworld(const C_PLAYER_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void C_PLAYER_WORLD::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void C_PLAYER_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
C_PLAYER_WORLD::C_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_WORLD)
}
C_PLAYER_WORLD::C_PLAYER_WORLD(const C_PLAYER_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.matworld_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_WORLD)
}

inline void C_PLAYER_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.matworld_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_WORLD::~C_PLAYER_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void C_PLAYER_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_WORLD)
  return target;
}

size_t C_PLAYER_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_WORLD::GetClassData() const { return &_class_data_; }


void C_PLAYER_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_WORLD*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_WORLD::CopyFrom(const C_PLAYER_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_WORLD::IsInitialized() const {
  return true;
}

void C_PLAYER_WORLD::InternalSwap(C_PLAYER_WORLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_WORLD, _impl_.matworld_)
      + sizeof(C_PLAYER_WORLD::_impl_.matworld_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_WORLD, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_PLAYER_WORLD::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_WORLD* msg);
  static const ::Protocol::Matrix& matworld(const S_PLAYER_WORLD* msg);
};

const ::Protocol::Player&
S_PLAYER_WORLD::_Internal::player(const S_PLAYER_WORLD* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::Matrix&
S_PLAYER_WORLD::_Internal::matworld(const S_PLAYER_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void S_PLAYER_WORLD::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void S_PLAYER_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
S_PLAYER_WORLD::S_PLAYER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_WORLD)
}
S_PLAYER_WORLD::S_PLAYER_WORLD(const S_PLAYER_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_WORLD)
}

inline void S_PLAYER_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_WORLD::~S_PLAYER_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void S_PLAYER_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_WORLD)
  return target;
}

size_t S_PLAYER_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_WORLD::GetClassData() const { return &_class_data_; }


void S_PLAYER_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_WORLD*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_WORLD::CopyFrom(const S_PLAYER_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_WORLD::IsInitialized() const {
  return true;
}

void S_PLAYER_WORLD::InternalSwap(S_PLAYER_WORLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_WORLD, _impl_.success_)
      + sizeof(S_PLAYER_WORLD::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_WORLD, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_PLAYER_YAW_ACTION::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_YAW_ACTION* msg);
};

const ::Protocol::Player&
C_PLAYER_YAW_ACTION::_Internal::player(const C_PLAYER_YAW_ACTION* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_YAW_ACTION::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_YAW_ACTION::C_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_YAW_ACTION)
}
C_PLAYER_YAW_ACTION::C_PLAYER_YAW_ACTION(const C_PLAYER_YAW_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_YAW_ACTION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.yaw_, &from._impl_.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actionbit_) -
    reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.actionbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_YAW_ACTION)
}

inline void C_PLAYER_YAW_ACTION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_YAW_ACTION::~C_PLAYER_YAW_ACTION() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_YAW_ACTION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_YAW_ACTION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_YAW_ACTION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_YAW_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_YAW_ACTION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.actionbit_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.actionbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_YAW_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_YAW_ACTION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_YAW_ACTION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // uint32 actionBit = 3;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_YAW_ACTION)
  return target;
}

size_t C_PLAYER_YAW_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_YAW_ACTION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // uint32 actionBit = 3;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_YAW_ACTION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_YAW_ACTION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_YAW_ACTION::GetClassData() const { return &_class_data_; }


void C_PLAYER_YAW_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_YAW_ACTION*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_YAW_ACTION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_YAW_ACTION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_YAW_ACTION::CopyFrom(const C_PLAYER_YAW_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_YAW_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_YAW_ACTION::IsInitialized() const {
  return true;
}

void C_PLAYER_YAW_ACTION::InternalSwap(C_PLAYER_YAW_ACTION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_YAW_ACTION, _impl_.actionbit_)
      + sizeof(C_PLAYER_YAW_ACTION::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_YAW_ACTION, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_YAW_ACTION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_PLAYER_YAW_ACTION::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_YAW_ACTION* msg);
};

const ::Protocol::Player&
S_PLAYER_YAW_ACTION::_Internal::player(const S_PLAYER_YAW_ACTION* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_YAW_ACTION::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_YAW_ACTION::S_PLAYER_YAW_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_YAW_ACTION)
}
S_PLAYER_YAW_ACTION::S_PLAYER_YAW_ACTION(const S_PLAYER_YAW_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_YAW_ACTION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actionbit_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_YAW_ACTION)
}

inline void S_PLAYER_YAW_ACTION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_YAW_ACTION::~S_PLAYER_YAW_ACTION() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_YAW_ACTION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_YAW_ACTION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_YAW_ACTION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_YAW_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_YAW_ACTION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.actionbit_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_YAW_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_YAW_ACTION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_YAW_ACTION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // uint32 actionBit = 4;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_YAW_ACTION)
  return target;
}

size_t S_PLAYER_YAW_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_YAW_ACTION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // uint32 actionBit = 4;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_YAW_ACTION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_YAW_ACTION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_YAW_ACTION::GetClassData() const { return &_class_data_; }


void S_PLAYER_YAW_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_YAW_ACTION*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_YAW_ACTION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_YAW_ACTION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_YAW_ACTION::CopyFrom(const S_PLAYER_YAW_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_YAW_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_YAW_ACTION::IsInitialized() const {
  return true;
}

void S_PLAYER_YAW_ACTION::InternalSwap(S_PLAYER_YAW_ACTION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_YAW_ACTION, _impl_.actionbit_)
      + sizeof(S_PLAYER_YAW_ACTION::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_YAW_ACTION, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_YAW_ACTION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class C_PLAYER_ACTION::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_ACTION* msg);
};

const ::Protocol::Player&
C_PLAYER_ACTION::_Internal::player(const C_PLAYER_ACTION* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_ACTION::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_ACTION::C_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ACTION)
}
C_PLAYER_ACTION::C_PLAYER_ACTION(const C_PLAYER_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_ACTION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.actionbit_ = from._impl_.actionbit_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ACTION)
}

inline void C_PLAYER_ACTION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_ACTION::~C_PLAYER_ACTION() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ACTION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_ACTION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_ACTION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ACTION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.actionbit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_ACTION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ACTION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint32 actionBit = 2;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ACTION)
  return target;
}

size_t C_PLAYER_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ACTION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 actionBit = 2;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_ACTION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_ACTION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_ACTION::GetClassData() const { return &_class_data_; }


void C_PLAYER_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_ACTION*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_ACTION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ACTION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_ACTION::CopyFrom(const C_PLAYER_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_ACTION::IsInitialized() const {
  return true;
}

void C_PLAYER_ACTION::InternalSwap(C_PLAYER_ACTION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION, _impl_.actionbit_)
      + sizeof(C_PLAYER_ACTION::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_ACTION, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ACTION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_PLAYER_ACTION::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_ACTION* msg);
};

const ::Protocol::Player&
S_PLAYER_ACTION::_Internal::player(const S_PLAYER_ACTION* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_ACTION::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_ACTION::S_PLAYER_ACTION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ACTION)
}
S_PLAYER_ACTION::S_PLAYER_ACTION(const S_PLAYER_ACTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_ACTION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actionbit_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ACTION)
}

inline void S_PLAYER_ACTION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_ACTION::~S_PLAYER_ACTION() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ACTION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_ACTION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_ACTION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_ACTION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ACTION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.actionbit_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_ACTION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_ACTION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ACTION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint32 actionBit = 3;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ACTION)
  return target;
}

size_t S_PLAYER_ACTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ACTION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 actionBit = 3;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_ACTION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_ACTION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_ACTION::GetClassData() const { return &_class_data_; }


void S_PLAYER_ACTION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_ACTION*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_ACTION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ACTION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_ACTION::CopyFrom(const S_PLAYER_ACTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ACTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_ACTION::IsInitialized() const {
  return true;
}

void S_PLAYER_ACTION::InternalSwap(S_PLAYER_ACTION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION, _impl_.actionbit_)
      + sizeof(S_PLAYER_ACTION::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_ACTION, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ACTION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_PLAYER_ARROW::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_ARROW* msg);
  static const ::Protocol::Vec3& vlookat(const C_PLAYER_ARROW* msg);
};

const ::Protocol::Player&
C_PLAYER_ARROW::_Internal::player(const C_PLAYER_ARROW* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::Vec3&
C_PLAYER_ARROW::_Internal::vlookat(const C_PLAYER_ARROW* msg) {
  return *msg->_impl_.vlookat_;
}
void C_PLAYER_ARROW::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void C_PLAYER_ARROW::clear_vlookat() {
  if (GetArenaForAllocation() == nullptr && _impl_.vlookat_ != nullptr) {
    delete _impl_.vlookat_;
  }
  _impl_.vlookat_ = nullptr;
}
C_PLAYER_ARROW::C_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_ARROW)
}
C_PLAYER_ARROW::C_PLAYER_ARROW(const C_PLAYER_ARROW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_ARROW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.vlookat_){nullptr}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_vlookat()) {
    _this->_impl_.vlookat_ = new ::Protocol::Vec3(*from._impl_.vlookat_);
  }
  ::memcpy(&_impl_.yaw_, &from._impl_.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actionbit_) -
    reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.actionbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_ARROW)
}

inline void C_PLAYER_ARROW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.vlookat_){nullptr}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_ARROW::~C_PLAYER_ARROW() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_ARROW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_ARROW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.vlookat_;
}

void C_PLAYER_ARROW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_ARROW::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_ARROW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vlookat_ != nullptr) {
    delete _impl_.vlookat_;
  }
  _impl_.vlookat_ = nullptr;
  ::memset(&_impl_.yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.actionbit_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.actionbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_ARROW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 vLookAt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vlookat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_ARROW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_ARROW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // .Protocol.Vec3 vLookAt = 3;
  if (this->_internal_has_vlookat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vlookat(this),
        _Internal::vlookat(this).GetCachedSize(), target, stream);
  }

  // uint32 actionBit = 4;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_ARROW)
  return target;
}

size_t C_PLAYER_ARROW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_ARROW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.Vec3 vLookAt = 3;
  if (this->_internal_has_vlookat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vlookat_);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // uint32 actionBit = 4;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_ARROW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_ARROW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_ARROW::GetClassData() const { return &_class_data_; }


void C_PLAYER_ARROW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_ARROW*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_ARROW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_ARROW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_vlookat()) {
    _this->_internal_mutable_vlookat()->::Protocol::Vec3::MergeFrom(
        from._internal_vlookat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_ARROW::CopyFrom(const C_PLAYER_ARROW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_ARROW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_ARROW::IsInitialized() const {
  return true;
}

void C_PLAYER_ARROW::InternalSwap(C_PLAYER_ARROW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_ARROW, _impl_.actionbit_)
      + sizeof(C_PLAYER_ARROW::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_ARROW, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_ARROW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_PLAYER_ARROW::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_ARROW* msg);
  static const ::Protocol::Vec3& vlookat(const S_PLAYER_ARROW* msg);
};

const ::Protocol::Player&
S_PLAYER_ARROW::_Internal::player(const S_PLAYER_ARROW* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::Vec3&
S_PLAYER_ARROW::_Internal::vlookat(const S_PLAYER_ARROW* msg) {
  return *msg->_impl_.vlookat_;
}
void S_PLAYER_ARROW::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void S_PLAYER_ARROW::clear_vlookat() {
  if (GetArenaForAllocation() == nullptr && _impl_.vlookat_ != nullptr) {
    delete _impl_.vlookat_;
  }
  _impl_.vlookat_ = nullptr;
}
S_PLAYER_ARROW::S_PLAYER_ARROW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_ARROW)
}
S_PLAYER_ARROW::S_PLAYER_ARROW(const S_PLAYER_ARROW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_ARROW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.vlookat_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.actionbit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_vlookat()) {
    _this->_impl_.vlookat_ = new ::Protocol::Vec3(*from._impl_.vlookat_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actionbit_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_ARROW)
}

inline void S_PLAYER_ARROW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.vlookat_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.actionbit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_ARROW::~S_PLAYER_ARROW() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_ARROW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_ARROW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.vlookat_;
}

void S_PLAYER_ARROW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_ARROW::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_ARROW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vlookat_ != nullptr) {
    delete _impl_.vlookat_;
  }
  _impl_.vlookat_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.actionbit_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.actionbit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_ARROW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 vLookAt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vlookat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 actionBit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.actionbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_ARROW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_ARROW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // .Protocol.Vec3 vLookAt = 4;
  if (this->_internal_has_vlookat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vlookat(this),
        _Internal::vlookat(this).GetCachedSize(), target, stream);
  }

  // uint32 actionBit = 5;
  if (this->_internal_actionbit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_actionbit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_ARROW)
  return target;
}

size_t S_PLAYER_ARROW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_ARROW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.Vec3 vLookAt = 4;
  if (this->_internal_has_vlookat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vlookat_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // uint32 actionBit = 5;
  if (this->_internal_actionbit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actionbit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_ARROW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_ARROW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_ARROW::GetClassData() const { return &_class_data_; }


void S_PLAYER_ARROW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_ARROW*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_ARROW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_ARROW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_vlookat()) {
    _this->_internal_mutable_vlookat()->::Protocol::Vec3::MergeFrom(
        from._internal_vlookat());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_actionbit() != 0) {
    _this->_internal_set_actionbit(from._internal_actionbit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_ARROW::CopyFrom(const S_PLAYER_ARROW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_ARROW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_ARROW::IsInitialized() const {
  return true;
}

void S_PLAYER_ARROW::InternalSwap(S_PLAYER_ARROW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_ARROW, _impl_.actionbit_)
      + sizeof(S_PLAYER_ARROW::_impl_.actionbit_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_ARROW, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_ARROW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class C_PLAYER_EQUIP::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_EQUIP* msg);
  static const ::Protocol::EquipState& state(const C_PLAYER_EQUIP* msg);
};

const ::Protocol::Player&
C_PLAYER_EQUIP::_Internal::player(const C_PLAYER_EQUIP* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::EquipState&
C_PLAYER_EQUIP::_Internal::state(const C_PLAYER_EQUIP* msg) {
  return *msg->_impl_.state_;
}
void C_PLAYER_EQUIP::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void C_PLAYER_EQUIP::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
C_PLAYER_EQUIP::C_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_EQUIP)
}
C_PLAYER_EQUIP::C_PLAYER_EQUIP(const C_PLAYER_EQUIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_EQUIP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::Protocol::EquipState(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_EQUIP)
}

inline void C_PLAYER_EQUIP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_EQUIP::~C_PLAYER_EQUIP() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_EQUIP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_EQUIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void C_PLAYER_EQUIP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_EQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_EQUIP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_EQUIP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_EQUIP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_EQUIP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EquipState state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_EQUIP)
  return target;
}

size_t C_PLAYER_EQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_EQUIP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.EquipState state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_EQUIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_EQUIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_EQUIP::GetClassData() const { return &_class_data_; }


void C_PLAYER_EQUIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_EQUIP*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_EQUIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_EQUIP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::Protocol::EquipState::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_EQUIP::CopyFrom(const C_PLAYER_EQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_EQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_EQUIP::IsInitialized() const {
  return true;
}

void C_PLAYER_EQUIP::InternalSwap(C_PLAYER_EQUIP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_EQUIP, _impl_.state_)
      + sizeof(C_PLAYER_EQUIP::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_EQUIP, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_EQUIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class S_PLAYER_EQUIP::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_EQUIP* msg);
  static const ::Protocol::EquipState& state(const S_PLAYER_EQUIP* msg);
};

const ::Protocol::Player&
S_PLAYER_EQUIP::_Internal::player(const S_PLAYER_EQUIP* msg) {
  return *msg->_impl_.player_;
}
const ::Protocol::EquipState&
S_PLAYER_EQUIP::_Internal::state(const S_PLAYER_EQUIP* msg) {
  return *msg->_impl_.state_;
}
void S_PLAYER_EQUIP::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
void S_PLAYER_EQUIP::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
S_PLAYER_EQUIP::S_PLAYER_EQUIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_EQUIP)
}
S_PLAYER_EQUIP::S_PLAYER_EQUIP(const S_PLAYER_EQUIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_EQUIP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::Protocol::EquipState(*from._impl_.state_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_EQUIP)
}

inline void S_PLAYER_EQUIP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.state_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_EQUIP::~S_PLAYER_EQUIP() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_EQUIP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_EQUIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.state_;
}

void S_PLAYER_EQUIP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_EQUIP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_EQUIP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_EQUIP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EquipState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_EQUIP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_EQUIP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.EquipState state = 3;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_EQUIP)
  return target;
}

size_t S_PLAYER_EQUIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_EQUIP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.EquipState state = 3;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_EQUIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_EQUIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_EQUIP::GetClassData() const { return &_class_data_; }


void S_PLAYER_EQUIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_EQUIP*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_EQUIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_EQUIP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::Protocol::EquipState::MergeFrom(
        from._internal_state());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_EQUIP::CopyFrom(const S_PLAYER_EQUIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_EQUIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_EQUIP::IsInitialized() const {
  return true;
}

void S_PLAYER_EQUIP::InternalSwap(S_PLAYER_EQUIP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_EQUIP, _impl_.success_)
      + sizeof(S_PLAYER_EQUIP::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_EQUIP, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_EQUIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_ALL_PLAYER_ENTER::_Internal {
 public:
};

S_ALL_PLAYER_ENTER::S_ALL_PLAYER_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ALL_PLAYER_ENTER)
}
S_ALL_PLAYER_ENTER::S_ALL_PLAYER_ENTER(const S_ALL_PLAYER_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ALL_PLAYER_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ALL_PLAYER_ENTER)
}

inline void S_ALL_PLAYER_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ALL_PLAYER_ENTER::~S_ALL_PLAYER_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ALL_PLAYER_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ALL_PLAYER_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ALL_PLAYER_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ALL_PLAYER_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ALL_PLAYER_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ALL_PLAYER_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ALL_PLAYER_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ALL_PLAYER_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ALL_PLAYER_ENTER)
  return target;
}

size_t S_ALL_PLAYER_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ALL_PLAYER_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ALL_PLAYER_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ALL_PLAYER_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ALL_PLAYER_ENTER::GetClassData() const { return &_class_data_; }


void S_ALL_PLAYER_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ALL_PLAYER_ENTER*>(&to_msg);
  auto& from = static_cast<const S_ALL_PLAYER_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ALL_PLAYER_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ALL_PLAYER_ENTER::CopyFrom(const S_ALL_PLAYER_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ALL_PLAYER_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ALL_PLAYER_ENTER::IsInitialized() const {
  return true;
}

void S_ALL_PLAYER_ENTER::InternalSwap(S_ALL_PLAYER_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ALL_PLAYER_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class C_PLAYER_DEAD::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_DEAD* msg);
};

const ::Protocol::Player&
C_PLAYER_DEAD::_Internal::player(const C_PLAYER_DEAD* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_DEAD::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_DEAD::C_PLAYER_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_DEAD)
}
C_PLAYER_DEAD::C_PLAYER_DEAD(const C_PLAYER_DEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_DEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_DEAD)
}

inline void C_PLAYER_DEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_DEAD::~C_PLAYER_DEAD() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_DEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_DEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_DEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_DEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_DEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_DEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_DEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_DEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_DEAD)
  return target;
}

size_t C_PLAYER_DEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_DEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_DEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_DEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_DEAD::GetClassData() const { return &_class_data_; }


void C_PLAYER_DEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_DEAD*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_DEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_DEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_DEAD::CopyFrom(const C_PLAYER_DEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_DEAD::IsInitialized() const {
  return true;
}

void C_PLAYER_DEAD::InternalSwap(C_PLAYER_DEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_DEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_PLAYER_DEAD::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_DEAD* msg);
};

const ::Protocol::Player&
S_PLAYER_DEAD::_Internal::player(const S_PLAYER_DEAD* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_DEAD::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_DEAD::S_PLAYER_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_DEAD)
}
S_PLAYER_DEAD::S_PLAYER_DEAD(const S_PLAYER_DEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_DEAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_DEAD)
}

inline void S_PLAYER_DEAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_DEAD::~S_PLAYER_DEAD() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_DEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_DEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_DEAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_DEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_DEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_DEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_DEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_DEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_DEAD)
  return target;
}

size_t S_PLAYER_DEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_DEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_DEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_DEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_DEAD::GetClassData() const { return &_class_data_; }


void S_PLAYER_DEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_DEAD*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_DEAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_DEAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_DEAD::CopyFrom(const S_PLAYER_DEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_DEAD::IsInitialized() const {
  return true;
}

void S_PLAYER_DEAD::InternalSwap(S_PLAYER_DEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_DEAD, _impl_.success_)
      + sizeof(S_PLAYER_DEAD::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_DEAD, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_DEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class C_PLAYER_RESPANW::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_RESPANW* msg);
};

const ::Protocol::Player&
C_PLAYER_RESPANW::_Internal::player(const C_PLAYER_RESPANW* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_RESPANW::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_RESPANW::C_PLAYER_RESPANW(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_RESPANW)
}
C_PLAYER_RESPANW::C_PLAYER_RESPANW(const C_PLAYER_RESPANW& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_RESPANW* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_RESPANW)
}

inline void C_PLAYER_RESPANW::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_RESPANW::~C_PLAYER_RESPANW() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_RESPANW)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_RESPANW::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_RESPANW::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_RESPANW::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_RESPANW)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_RESPANW::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_RESPANW::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_RESPANW)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_RESPANW)
  return target;
}

size_t C_PLAYER_RESPANW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_RESPANW)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_RESPANW::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_RESPANW::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_RESPANW::GetClassData() const { return &_class_data_; }


void C_PLAYER_RESPANW::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_RESPANW*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_RESPANW&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_RESPANW)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_RESPANW::CopyFrom(const C_PLAYER_RESPANW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_RESPANW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_RESPANW::IsInitialized() const {
  return true;
}

void C_PLAYER_RESPANW::InternalSwap(C_PLAYER_RESPANW* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_RESPANW::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_PLAYER_RESPAWN::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_RESPAWN* msg);
};

const ::Protocol::Player&
S_PLAYER_RESPAWN::_Internal::player(const S_PLAYER_RESPAWN* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_RESPAWN::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_RESPAWN::S_PLAYER_RESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_RESPAWN)
}
S_PLAYER_RESPAWN::S_PLAYER_RESPAWN(const S_PLAYER_RESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_RESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_RESPAWN)
}

inline void S_PLAYER_RESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_RESPAWN::~S_PLAYER_RESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_RESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_RESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_RESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_RESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_RESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_RESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_RESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_RESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_RESPAWN)
  return target;
}

size_t S_PLAYER_RESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_RESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_RESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_RESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_RESPAWN::GetClassData() const { return &_class_data_; }


void S_PLAYER_RESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_RESPAWN*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_RESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_RESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_RESPAWN::CopyFrom(const S_PLAYER_RESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_RESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_RESPAWN::IsInitialized() const {
  return true;
}

void S_PLAYER_RESPAWN::InternalSwap(S_PLAYER_RESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_RESPAWN, _impl_.success_)
      + sizeof(S_PLAYER_RESPAWN::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_RESPAWN, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_RESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class C_PLAYER_MOVE_STAGE::_Internal {
 public:
};

C_PLAYER_MOVE_STAGE::C_PLAYER_MOVE_STAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_MOVE_STAGE)
}
C_PLAYER_MOVE_STAGE::C_PLAYER_MOVE_STAGE(const C_PLAYER_MOVE_STAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_MOVE_STAGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loadingtag_){}
    , decltype(_impl_.stagetag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loadingtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loadingtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loadingtag().empty()) {
    _this->_impl_.loadingtag_.Set(from._internal_loadingtag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stagetag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stagetag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stagetag().empty()) {
    _this->_impl_.stagetag_.Set(from._internal_stagetag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_MOVE_STAGE)
}

inline void C_PLAYER_MOVE_STAGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loadingtag_){}
    , decltype(_impl_.stagetag_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loadingtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loadingtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stagetag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stagetag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_PLAYER_MOVE_STAGE::~C_PLAYER_MOVE_STAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_MOVE_STAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_MOVE_STAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loadingtag_.Destroy();
  _impl_.stagetag_.Destroy();
}

void C_PLAYER_MOVE_STAGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_MOVE_STAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_MOVE_STAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loadingtag_.ClearToEmpty();
  _impl_.stagetag_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_MOVE_STAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loadingTag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_loadingtag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PLAYER_MOVE_STAGE.loadingTag"));
        } else
          goto handle_unusual;
        continue;
      // string stageTag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stagetag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PLAYER_MOVE_STAGE.stageTag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_MOVE_STAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_MOVE_STAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string loadingTag = 1;
  if (!this->_internal_loadingtag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loadingtag().data(), static_cast<int>(this->_internal_loadingtag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PLAYER_MOVE_STAGE.loadingTag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loadingtag(), target);
  }

  // string stageTag = 2;
  if (!this->_internal_stagetag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stagetag().data(), static_cast<int>(this->_internal_stagetag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PLAYER_MOVE_STAGE.stageTag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stagetag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_MOVE_STAGE)
  return target;
}

size_t C_PLAYER_MOVE_STAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_MOVE_STAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loadingTag = 1;
  if (!this->_internal_loadingtag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loadingtag());
  }

  // string stageTag = 2;
  if (!this->_internal_stagetag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stagetag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_MOVE_STAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_MOVE_STAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_MOVE_STAGE::GetClassData() const { return &_class_data_; }


void C_PLAYER_MOVE_STAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_MOVE_STAGE*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_MOVE_STAGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_MOVE_STAGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loadingtag().empty()) {
    _this->_internal_set_loadingtag(from._internal_loadingtag());
  }
  if (!from._internal_stagetag().empty()) {
    _this->_internal_set_stagetag(from._internal_stagetag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_MOVE_STAGE::CopyFrom(const C_PLAYER_MOVE_STAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_MOVE_STAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_MOVE_STAGE::IsInitialized() const {
  return true;
}

void C_PLAYER_MOVE_STAGE::InternalSwap(C_PLAYER_MOVE_STAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loadingtag_, lhs_arena,
      &other->_impl_.loadingtag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stagetag_, lhs_arena,
      &other->_impl_.stagetag_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_MOVE_STAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_PLAYER_MOVE_STAGE::_Internal {
 public:
};

S_PLAYER_MOVE_STAGE::S_PLAYER_MOVE_STAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_MOVE_STAGE)
}
S_PLAYER_MOVE_STAGE::S_PLAYER_MOVE_STAGE(const S_PLAYER_MOVE_STAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_MOVE_STAGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loadingtag_){}
    , decltype(_impl_.stagetag_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loadingtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loadingtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loadingtag().empty()) {
    _this->_impl_.loadingtag_.Set(from._internal_loadingtag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stagetag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stagetag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stagetag().empty()) {
    _this->_impl_.stagetag_.Set(from._internal_stagetag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_MOVE_STAGE)
}

inline void S_PLAYER_MOVE_STAGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loadingtag_){}
    , decltype(_impl_.stagetag_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loadingtag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loadingtag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stagetag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stagetag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_PLAYER_MOVE_STAGE::~S_PLAYER_MOVE_STAGE() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_MOVE_STAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_MOVE_STAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loadingtag_.Destroy();
  _impl_.stagetag_.Destroy();
}

void S_PLAYER_MOVE_STAGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_MOVE_STAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_MOVE_STAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loadingtag_.ClearToEmpty();
  _impl_.stagetag_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_MOVE_STAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string loadingTag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_loadingtag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PLAYER_MOVE_STAGE.loadingTag"));
        } else
          goto handle_unusual;
        continue;
      // string stageTag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_stagetag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PLAYER_MOVE_STAGE.stageTag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_MOVE_STAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_MOVE_STAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string loadingTag = 2;
  if (!this->_internal_loadingtag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loadingtag().data(), static_cast<int>(this->_internal_loadingtag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PLAYER_MOVE_STAGE.loadingTag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loadingtag(), target);
  }

  // string stageTag = 3;
  if (!this->_internal_stagetag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stagetag().data(), static_cast<int>(this->_internal_stagetag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PLAYER_MOVE_STAGE.stageTag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_stagetag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_MOVE_STAGE)
  return target;
}

size_t S_PLAYER_MOVE_STAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_MOVE_STAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loadingTag = 2;
  if (!this->_internal_loadingtag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loadingtag());
  }

  // string stageTag = 3;
  if (!this->_internal_stagetag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stagetag());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_MOVE_STAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_MOVE_STAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_MOVE_STAGE::GetClassData() const { return &_class_data_; }


void S_PLAYER_MOVE_STAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_MOVE_STAGE*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_MOVE_STAGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_MOVE_STAGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loadingtag().empty()) {
    _this->_internal_set_loadingtag(from._internal_loadingtag());
  }
  if (!from._internal_stagetag().empty()) {
    _this->_internal_set_stagetag(from._internal_stagetag());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_MOVE_STAGE::CopyFrom(const S_PLAYER_MOVE_STAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_MOVE_STAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_MOVE_STAGE::IsInitialized() const {
  return true;
}

void S_PLAYER_MOVE_STAGE::InternalSwap(S_PLAYER_MOVE_STAGE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loadingtag_, lhs_arena,
      &other->_impl_.loadingtag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stagetag_, lhs_arena,
      &other->_impl_.stagetag_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_MOVE_STAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class C_PLAYER_MOVE_STAGE_FINISH::_Internal {
 public:
  static const ::Protocol::Player& player(const C_PLAYER_MOVE_STAGE_FINISH* msg);
};

const ::Protocol::Player&
C_PLAYER_MOVE_STAGE_FINISH::_Internal::player(const C_PLAYER_MOVE_STAGE_FINISH* msg) {
  return *msg->_impl_.player_;
}
void C_PLAYER_MOVE_STAGE_FINISH::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_PLAYER_MOVE_STAGE_FINISH::C_PLAYER_MOVE_STAGE_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
}
C_PLAYER_MOVE_STAGE_FINISH::C_PLAYER_MOVE_STAGE_FINISH(const C_PLAYER_MOVE_STAGE_FINISH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PLAYER_MOVE_STAGE_FINISH* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.playerskin_ = from._impl_.playerskin_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
}

inline void C_PLAYER_MOVE_STAGE_FINISH::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_PLAYER_MOVE_STAGE_FINISH::~C_PLAYER_MOVE_STAGE_FINISH() {
  // @@protoc_insertion_point(destructor:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PLAYER_MOVE_STAGE_FINISH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_PLAYER_MOVE_STAGE_FINISH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PLAYER_MOVE_STAGE_FINISH::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.playerskin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PLAYER_MOVE_STAGE_FINISH::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSkin playerSkin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playerskin(static_cast<::Protocol::PlayerSkin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PLAYER_MOVE_STAGE_FINISH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerskin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  return target;
}

size_t C_PLAYER_MOVE_STAGE_FINISH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerskin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PLAYER_MOVE_STAGE_FINISH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PLAYER_MOVE_STAGE_FINISH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PLAYER_MOVE_STAGE_FINISH::GetClassData() const { return &_class_data_; }


void C_PLAYER_MOVE_STAGE_FINISH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PLAYER_MOVE_STAGE_FINISH*>(&to_msg);
  auto& from = static_cast<const C_PLAYER_MOVE_STAGE_FINISH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_playerskin() != 0) {
    _this->_internal_set_playerskin(from._internal_playerskin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PLAYER_MOVE_STAGE_FINISH::CopyFrom(const C_PLAYER_MOVE_STAGE_FINISH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PLAYER_MOVE_STAGE_FINISH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PLAYER_MOVE_STAGE_FINISH::IsInitialized() const {
  return true;
}

void C_PLAYER_MOVE_STAGE_FINISH::InternalSwap(C_PLAYER_MOVE_STAGE_FINISH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_PLAYER_MOVE_STAGE_FINISH, _impl_.playerskin_)
      + sizeof(C_PLAYER_MOVE_STAGE_FINISH::_impl_.playerskin_)
      - PROTOBUF_FIELD_OFFSET(C_PLAYER_MOVE_STAGE_FINISH, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PLAYER_MOVE_STAGE_FINISH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class S_PLAYER_MOVE_STAGE_FINISH::_Internal {
 public:
  static const ::Protocol::Player& player(const S_PLAYER_MOVE_STAGE_FINISH* msg);
};

const ::Protocol::Player&
S_PLAYER_MOVE_STAGE_FINISH::_Internal::player(const S_PLAYER_MOVE_STAGE_FINISH* msg) {
  return *msg->_impl_.player_;
}
void S_PLAYER_MOVE_STAGE_FINISH::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_PLAYER_MOVE_STAGE_FINISH::S_PLAYER_MOVE_STAGE_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
}
S_PLAYER_MOVE_STAGE_FINISH::S_PLAYER_MOVE_STAGE_FINISH(const S_PLAYER_MOVE_STAGE_FINISH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PLAYER_MOVE_STAGE_FINISH* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.playerskin_ = from._impl_.playerskin_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
}

inline void S_PLAYER_MOVE_STAGE_FINISH::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.playerskin_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PLAYER_MOVE_STAGE_FINISH::~S_PLAYER_MOVE_STAGE_FINISH() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PLAYER_MOVE_STAGE_FINISH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_PLAYER_MOVE_STAGE_FINISH::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PLAYER_MOVE_STAGE_FINISH::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.playerskin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYER_MOVE_STAGE_FINISH::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerSkin playerSkin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playerskin(static_cast<::Protocol::PlayerSkin>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PLAYER_MOVE_STAGE_FINISH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerskin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  return target;
}

size_t S_PLAYER_MOVE_STAGE_FINISH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .Protocol.PlayerSkin playerSkin = 2;
  if (this->_internal_playerskin() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerskin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PLAYER_MOVE_STAGE_FINISH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PLAYER_MOVE_STAGE_FINISH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PLAYER_MOVE_STAGE_FINISH::GetClassData() const { return &_class_data_; }


void S_PLAYER_MOVE_STAGE_FINISH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PLAYER_MOVE_STAGE_FINISH*>(&to_msg);
  auto& from = static_cast<const S_PLAYER_MOVE_STAGE_FINISH&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_playerskin() != 0) {
    _this->_internal_set_playerskin(from._internal_playerskin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PLAYER_MOVE_STAGE_FINISH::CopyFrom(const S_PLAYER_MOVE_STAGE_FINISH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYER_MOVE_STAGE_FINISH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYER_MOVE_STAGE_FINISH::IsInitialized() const {
  return true;
}

void S_PLAYER_MOVE_STAGE_FINISH::InternalSwap(S_PLAYER_MOVE_STAGE_FINISH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYER_MOVE_STAGE_FINISH, _impl_.playerskin_)
      + sizeof(S_PLAYER_MOVE_STAGE_FINISH::_impl_.playerskin_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYER_MOVE_STAGE_FINISH, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYER_MOVE_STAGE_FINISH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class C_SPAWN_MONSTER::_Internal {
 public:
  static const ::Protocol::Matrix& matrix(const C_SPAWN_MONSTER* msg);
};

const ::Protocol::Matrix&
C_SPAWN_MONSTER::_Internal::matrix(const C_SPAWN_MONSTER* msg) {
  return *msg->_impl_.matrix_;
}
void C_SPAWN_MONSTER::clear_matrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
}
C_SPAWN_MONSTER::C_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SPAWN_MONSTER)
}
C_SPAWN_MONSTER::C_SPAWN_MONSTER(const C_SPAWN_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SPAWN_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_factory().empty()) {
    _this->_impl_.factory_.Set(from._internal_factory(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matrix()) {
    _this->_impl_.matrix_ = new ::Protocol::Matrix(*from._impl_.matrix_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SPAWN_MONSTER)
}

inline void C_SPAWN_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_SPAWN_MONSTER::~C_SPAWN_MONSTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_SPAWN_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SPAWN_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.factory_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matrix_;
}

void C_SPAWN_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SPAWN_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.factory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SPAWN_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string factory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_factory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_SPAWN_MONSTER.factory"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SPAWN_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string factory = 2;
  if (!this->_internal_factory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_factory().data(), static_cast<int>(this->_internal_factory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_SPAWN_MONSTER.factory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_factory(), target);
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matrix(this),
        _Internal::matrix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SPAWN_MONSTER)
  return target;
}

size_t C_SPAWN_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SPAWN_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string factory = 2;
  if (!this->_internal_factory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory());
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matrix_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SPAWN_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SPAWN_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SPAWN_MONSTER::GetClassData() const { return &_class_data_; }


void C_SPAWN_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SPAWN_MONSTER*>(&to_msg);
  auto& from = static_cast<const C_SPAWN_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SPAWN_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_factory().empty()) {
    _this->_internal_set_factory(from._internal_factory());
  }
  if (from._internal_has_matrix()) {
    _this->_internal_mutable_matrix()->::Protocol::Matrix::MergeFrom(
        from._internal_matrix());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SPAWN_MONSTER::CopyFrom(const C_SPAWN_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SPAWN_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SPAWN_MONSTER::IsInitialized() const {
  return true;
}

void C_SPAWN_MONSTER::InternalSwap(C_SPAWN_MONSTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.factory_, lhs_arena,
      &other->_impl_.factory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SPAWN_MONSTER, _impl_.id_)
      + sizeof(C_SPAWN_MONSTER::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(C_SPAWN_MONSTER, _impl_.matrix_)>(
          reinterpret_cast<char*>(&_impl_.matrix_),
          reinterpret_cast<char*>(&other->_impl_.matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SPAWN_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class S_SPAWN_MONSTER::_Internal {
 public:
  static const ::Protocol::Matrix& matrix(const S_SPAWN_MONSTER* msg);
};

const ::Protocol::Matrix&
S_SPAWN_MONSTER::_Internal::matrix(const S_SPAWN_MONSTER* msg) {
  return *msg->_impl_.matrix_;
}
void S_SPAWN_MONSTER::clear_matrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
}
S_SPAWN_MONSTER::S_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN_MONSTER)
}
S_SPAWN_MONSTER::S_SPAWN_MONSTER(const S_SPAWN_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_factory().empty()) {
    _this->_impl_.factory_.Set(from._internal_factory(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matrix()) {
    _this->_impl_.matrix_ = new ::Protocol::Matrix(*from._impl_.matrix_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN_MONSTER)
}

inline void S_SPAWN_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_SPAWN_MONSTER::~S_SPAWN_MONSTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.factory_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matrix_;
}

void S_SPAWN_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.factory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string factory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_factory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_SPAWN_MONSTER.factory"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // string factory = 3;
  if (!this->_internal_factory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_factory().data(), static_cast<int>(this->_internal_factory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_SPAWN_MONSTER.factory");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_factory(), target);
  }

  // .Protocol.Matrix matrix = 4;
  if (this->_internal_has_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::matrix(this),
        _Internal::matrix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN_MONSTER)
  return target;
}

size_t S_SPAWN_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string factory = 3;
  if (!this->_internal_factory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory());
  }

  // .Protocol.Matrix matrix = 4;
  if (this->_internal_has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matrix_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN_MONSTER::GetClassData() const { return &_class_data_; }


void S_SPAWN_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN_MONSTER*>(&to_msg);
  auto& from = static_cast<const S_SPAWN_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_factory().empty()) {
    _this->_internal_set_factory(from._internal_factory());
  }
  if (from._internal_has_matrix()) {
    _this->_internal_mutable_matrix()->::Protocol::Matrix::MergeFrom(
        from._internal_matrix());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN_MONSTER::CopyFrom(const S_SPAWN_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN_MONSTER::IsInitialized() const {
  return true;
}

void S_SPAWN_MONSTER::InternalSwap(S_SPAWN_MONSTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.factory_, lhs_arena,
      &other->_impl_.factory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SPAWN_MONSTER, _impl_.id_)
      + sizeof(S_SPAWN_MONSTER::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(S_SPAWN_MONSTER, _impl_.matrix_)>(
          reinterpret_cast<char*>(&_impl_.matrix_),
          reinterpret_cast<char*>(&other->_impl_.matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class C_MONSTER_SET_TARGET::_Internal {
 public:
};

C_MONSTER_SET_TARGET::C_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MONSTER_SET_TARGET)
}
C_MONSTER_SET_TARGET::C_MONSTER_SET_TARGET(const C_MONSTER_SET_TARGET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MONSTER_SET_TARGET* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.battack_){}
    , decltype(_impl_.monsterid_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.battack_, &from._impl_.battack_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.battack_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MONSTER_SET_TARGET)
}

inline void C_MONSTER_SET_TARGET::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.battack_){false}
    , decltype(_impl_.monsterid_){0u}
    , decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MONSTER_SET_TARGET::~C_MONSTER_SET_TARGET() {
  // @@protoc_insertion_point(destructor:Protocol.C_MONSTER_SET_TARGET)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MONSTER_SET_TARGET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_MONSTER_SET_TARGET::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MONSTER_SET_TARGET::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MONSTER_SET_TARGET)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.battack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.battack_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MONSTER_SET_TARGET::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bAttack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.battack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monsterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MONSTER_SET_TARGET::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MONSTER_SET_TARGET)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bAttack = 1;
  if (this->_internal_battack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_battack(), target);
  }

  // uint32 monsterID = 2;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_monsterid(), target);
  }

  // uint32 playerID = 3;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MONSTER_SET_TARGET)
  return target;
}

size_t C_MONSTER_SET_TARGET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MONSTER_SET_TARGET)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bAttack = 1;
  if (this->_internal_battack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 monsterID = 2;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monsterid());
  }

  // uint32 playerID = 3;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MONSTER_SET_TARGET::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MONSTER_SET_TARGET::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MONSTER_SET_TARGET::GetClassData() const { return &_class_data_; }


void C_MONSTER_SET_TARGET::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MONSTER_SET_TARGET*>(&to_msg);
  auto& from = static_cast<const C_MONSTER_SET_TARGET&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MONSTER_SET_TARGET)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_battack() != 0) {
    _this->_internal_set_battack(from._internal_battack());
  }
  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MONSTER_SET_TARGET::CopyFrom(const C_MONSTER_SET_TARGET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MONSTER_SET_TARGET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MONSTER_SET_TARGET::IsInitialized() const {
  return true;
}

void C_MONSTER_SET_TARGET::InternalSwap(C_MONSTER_SET_TARGET* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MONSTER_SET_TARGET, _impl_.playerid_)
      + sizeof(C_MONSTER_SET_TARGET::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(C_MONSTER_SET_TARGET, _impl_.battack_)>(
          reinterpret_cast<char*>(&_impl_.battack_),
          reinterpret_cast<char*>(&other->_impl_.battack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MONSTER_SET_TARGET::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class S_MONSTER_SET_TARGET::_Internal {
 public:
};

S_MONSTER_SET_TARGET::S_MONSTER_SET_TARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MONSTER_SET_TARGET)
}
S_MONSTER_SET_TARGET::S_MONSTER_SET_TARGET(const S_MONSTER_SET_TARGET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MONSTER_SET_TARGET* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.battack_){}
    , decltype(_impl_.monsterid_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MONSTER_SET_TARGET)
}

inline void S_MONSTER_SET_TARGET::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.battack_){false}
    , decltype(_impl_.monsterid_){0u}
    , decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MONSTER_SET_TARGET::~S_MONSTER_SET_TARGET() {
  // @@protoc_insertion_point(destructor:Protocol.S_MONSTER_SET_TARGET)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MONSTER_SET_TARGET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MONSTER_SET_TARGET::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MONSTER_SET_TARGET::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MONSTER_SET_TARGET)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MONSTER_SET_TARGET::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bAttack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.battack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monsterID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MONSTER_SET_TARGET::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MONSTER_SET_TARGET)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // bool bAttack = 2;
  if (this->_internal_battack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_battack(), target);
  }

  // uint32 monsterID = 3;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_monsterid(), target);
  }

  // uint32 playerID = 4;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MONSTER_SET_TARGET)
  return target;
}

size_t S_MONSTER_SET_TARGET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MONSTER_SET_TARGET)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool bAttack = 2;
  if (this->_internal_battack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 monsterID = 3;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monsterid());
  }

  // uint32 playerID = 4;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MONSTER_SET_TARGET::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MONSTER_SET_TARGET::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MONSTER_SET_TARGET::GetClassData() const { return &_class_data_; }


void S_MONSTER_SET_TARGET::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MONSTER_SET_TARGET*>(&to_msg);
  auto& from = static_cast<const S_MONSTER_SET_TARGET&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MONSTER_SET_TARGET)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_battack() != 0) {
    _this->_internal_set_battack(from._internal_battack());
  }
  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MONSTER_SET_TARGET::CopyFrom(const S_MONSTER_SET_TARGET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MONSTER_SET_TARGET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MONSTER_SET_TARGET::IsInitialized() const {
  return true;
}

void S_MONSTER_SET_TARGET::InternalSwap(S_MONSTER_SET_TARGET* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MONSTER_SET_TARGET, _impl_.playerid_)
      + sizeof(S_MONSTER_SET_TARGET::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(S_MONSTER_SET_TARGET, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MONSTER_SET_TARGET::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class C_MONSTER_WORLD::_Internal {
 public:
  static const ::Protocol::Matrix& matworld(const C_MONSTER_WORLD* msg);
};

const ::Protocol::Matrix&
C_MONSTER_WORLD::_Internal::matworld(const C_MONSTER_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void C_MONSTER_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
C_MONSTER_WORLD::C_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MONSTER_WORLD)
}
C_MONSTER_WORLD::C_MONSTER_WORLD(const C_MONSTER_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MONSTER_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.monsterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  _this->_impl_.monsterid_ = from._impl_.monsterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MONSTER_WORLD)
}

inline void C_MONSTER_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.monsterid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MONSTER_WORLD::~C_MONSTER_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.C_MONSTER_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MONSTER_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void C_MONSTER_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MONSTER_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MONSTER_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  _impl_.monsterid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MONSTER_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 monsterID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MONSTER_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MONSTER_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monsterID = 1;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_monsterid(), target);
  }

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MONSTER_WORLD)
  return target;
}

size_t C_MONSTER_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MONSTER_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  // uint32 monsterID = 1;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monsterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MONSTER_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MONSTER_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MONSTER_WORLD::GetClassData() const { return &_class_data_; }


void C_MONSTER_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MONSTER_WORLD*>(&to_msg);
  auto& from = static_cast<const C_MONSTER_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MONSTER_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MONSTER_WORLD::CopyFrom(const C_MONSTER_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MONSTER_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MONSTER_WORLD::IsInitialized() const {
  return true;
}

void C_MONSTER_WORLD::InternalSwap(C_MONSTER_WORLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MONSTER_WORLD, _impl_.monsterid_)
      + sizeof(C_MONSTER_WORLD::_impl_.monsterid_)
      - PROTOBUF_FIELD_OFFSET(C_MONSTER_WORLD, _impl_.matworld_)>(
          reinterpret_cast<char*>(&_impl_.matworld_),
          reinterpret_cast<char*>(&other->_impl_.matworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MONSTER_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class S_MONSTER_WORLD::_Internal {
 public:
  static const ::Protocol::Matrix& matworld(const S_MONSTER_WORLD* msg);
};

const ::Protocol::Matrix&
S_MONSTER_WORLD::_Internal::matworld(const S_MONSTER_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void S_MONSTER_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
S_MONSTER_WORLD::S_MONSTER_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MONSTER_WORLD)
}
S_MONSTER_WORLD::S_MONSTER_WORLD(const S_MONSTER_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MONSTER_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.monsterid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monsterid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.monsterid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MONSTER_WORLD)
}

inline void S_MONSTER_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.monsterid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MONSTER_WORLD::~S_MONSTER_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.S_MONSTER_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MONSTER_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void S_MONSTER_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MONSTER_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MONSTER_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monsterid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.monsterid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MONSTER_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monsterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.monsterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MONSTER_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MONSTER_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 monsterID = 2;
  if (this->_internal_monsterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_monsterid(), target);
  }

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MONSTER_WORLD)
  return target;
}

size_t S_MONSTER_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MONSTER_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 monsterID = 2;
  if (this->_internal_monsterid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monsterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MONSTER_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MONSTER_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MONSTER_WORLD::GetClassData() const { return &_class_data_; }


void S_MONSTER_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MONSTER_WORLD*>(&to_msg);
  auto& from = static_cast<const S_MONSTER_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MONSTER_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_monsterid() != 0) {
    _this->_internal_set_monsterid(from._internal_monsterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MONSTER_WORLD::CopyFrom(const S_MONSTER_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MONSTER_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MONSTER_WORLD::IsInitialized() const {
  return true;
}

void S_MONSTER_WORLD::InternalSwap(S_MONSTER_WORLD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MONSTER_WORLD, _impl_.monsterid_)
      + sizeof(S_MONSTER_WORLD::_impl_.monsterid_)
      - PROTOBUF_FIELD_OFFSET(S_MONSTER_WORLD, _impl_.matworld_)>(
          reinterpret_cast<char*>(&_impl_.matworld_),
          reinterpret_cast<char*>(&other->_impl_.matworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MONSTER_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class C_BOSS_SPAWN::_Internal {
 public:
  static const ::Protocol::Matrix& matrix(const C_BOSS_SPAWN* msg);
};

const ::Protocol::Matrix&
C_BOSS_SPAWN::_Internal::matrix(const C_BOSS_SPAWN* msg) {
  return *msg->_impl_.matrix_;
}
void C_BOSS_SPAWN::clear_matrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
}
C_BOSS_SPAWN::C_BOSS_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BOSS_SPAWN)
}
C_BOSS_SPAWN::C_BOSS_SPAWN(const C_BOSS_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BOSS_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_factory().empty()) {
    _this->_impl_.factory_.Set(from._internal_factory(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matrix()) {
    _this->_impl_.matrix_ = new ::Protocol::Matrix(*from._impl_.matrix_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BOSS_SPAWN)
}

inline void C_BOSS_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BOSS_SPAWN::~C_BOSS_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.C_BOSS_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BOSS_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.factory_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matrix_;
}

void C_BOSS_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BOSS_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BOSS_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.factory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BOSS_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string factory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_factory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BOSS_SPAWN.factory"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BOSS_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BOSS_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string factory = 1;
  if (!this->_internal_factory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_factory().data(), static_cast<int>(this->_internal_factory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BOSS_SPAWN.factory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_factory(), target);
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matrix(this),
        _Internal::matrix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BOSS_SPAWN)
  return target;
}

size_t C_BOSS_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BOSS_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string factory = 1;
  if (!this->_internal_factory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory());
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matrix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BOSS_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BOSS_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BOSS_SPAWN::GetClassData() const { return &_class_data_; }


void C_BOSS_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BOSS_SPAWN*>(&to_msg);
  auto& from = static_cast<const C_BOSS_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BOSS_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_factory().empty()) {
    _this->_internal_set_factory(from._internal_factory());
  }
  if (from._internal_has_matrix()) {
    _this->_internal_mutable_matrix()->::Protocol::Matrix::MergeFrom(
        from._internal_matrix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BOSS_SPAWN::CopyFrom(const C_BOSS_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BOSS_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BOSS_SPAWN::IsInitialized() const {
  return true;
}

void C_BOSS_SPAWN::InternalSwap(C_BOSS_SPAWN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.factory_, lhs_arena,
      &other->_impl_.factory_, rhs_arena
  );
  swap(_impl_.matrix_, other->_impl_.matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BOSS_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// ===================================================================

class S_BOSS_SPAWN::_Internal {
 public:
  static const ::Protocol::Matrix& matrix(const S_BOSS_SPAWN* msg);
};

const ::Protocol::Matrix&
S_BOSS_SPAWN::_Internal::matrix(const S_BOSS_SPAWN* msg) {
  return *msg->_impl_.matrix_;
}
void S_BOSS_SPAWN::clear_matrix() {
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
}
S_BOSS_SPAWN::S_BOSS_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BOSS_SPAWN)
}
S_BOSS_SPAWN::S_BOSS_SPAWN(const S_BOSS_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BOSS_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_factory().empty()) {
    _this->_impl_.factory_.Set(from._internal_factory(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matrix()) {
    _this->_impl_.matrix_ = new ::Protocol::Matrix(*from._impl_.matrix_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BOSS_SPAWN)
}

inline void S_BOSS_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.factory_){}
    , decltype(_impl_.matrix_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.factory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.factory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BOSS_SPAWN::~S_BOSS_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_BOSS_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BOSS_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.factory_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matrix_;
}

void S_BOSS_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BOSS_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BOSS_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.factory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matrix_ != nullptr) {
    delete _impl_.matrix_;
  }
  _impl_.matrix_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BOSS_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string factory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_factory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BOSS_SPAWN.factory"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BOSS_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BOSS_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string factory = 2;
  if (!this->_internal_factory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_factory().data(), static_cast<int>(this->_internal_factory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BOSS_SPAWN.factory");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_factory(), target);
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matrix(this),
        _Internal::matrix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BOSS_SPAWN)
  return target;
}

size_t S_BOSS_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BOSS_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string factory = 2;
  if (!this->_internal_factory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_factory());
  }

  // .Protocol.Matrix matrix = 3;
  if (this->_internal_has_matrix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matrix_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BOSS_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BOSS_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BOSS_SPAWN::GetClassData() const { return &_class_data_; }


void S_BOSS_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BOSS_SPAWN*>(&to_msg);
  auto& from = static_cast<const S_BOSS_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BOSS_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_factory().empty()) {
    _this->_internal_set_factory(from._internal_factory());
  }
  if (from._internal_has_matrix()) {
    _this->_internal_mutable_matrix()->::Protocol::Matrix::MergeFrom(
        from._internal_matrix());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BOSS_SPAWN::CopyFrom(const S_BOSS_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BOSS_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BOSS_SPAWN::IsInitialized() const {
  return true;
}

void S_BOSS_SPAWN::InternalSwap(S_BOSS_SPAWN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.factory_, lhs_arena,
      &other->_impl_.factory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BOSS_SPAWN, _impl_.success_)
      + sizeof(S_BOSS_SPAWN::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_BOSS_SPAWN, _impl_.matrix_)>(
          reinterpret_cast<char*>(&_impl_.matrix_),
          reinterpret_cast<char*>(&other->_impl_.matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BOSS_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[33]);
}

// ===================================================================

class C_BOSS_WORLD::_Internal {
 public:
  static const ::Protocol::Matrix& matworld(const C_BOSS_WORLD* msg);
};

const ::Protocol::Matrix&
C_BOSS_WORLD::_Internal::matworld(const C_BOSS_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void C_BOSS_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
C_BOSS_WORLD::C_BOSS_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BOSS_WORLD)
}
C_BOSS_WORLD::C_BOSS_WORLD(const C_BOSS_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_BOSS_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objkey_){}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.ihp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objkey().empty()) {
    _this->_impl_.objkey_.Set(from._internal_objkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  _this->_impl_.ihp_ = from._impl_.ihp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BOSS_WORLD)
}

inline void C_BOSS_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objkey_){}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.ihp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_BOSS_WORLD::~C_BOSS_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.C_BOSS_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BOSS_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void C_BOSS_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_BOSS_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BOSS_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objkey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  _impl_.ihp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BOSS_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string objKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_objkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_BOSS_WORLD.objKey"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iHP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ihp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BOSS_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BOSS_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string objKey = 1;
  if (!this->_internal_objkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objkey().data(), static_cast<int>(this->_internal_objkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_BOSS_WORLD.objKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_objkey(), target);
  }

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  // uint32 iHP = 3;
  if (this->_internal_ihp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ihp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BOSS_WORLD)
  return target;
}

size_t C_BOSS_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BOSS_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objKey = 1;
  if (!this->_internal_objkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objkey());
  }

  // .Protocol.Matrix matWorld = 2;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  // uint32 iHP = 3;
  if (this->_internal_ihp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ihp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BOSS_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_BOSS_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BOSS_WORLD::GetClassData() const { return &_class_data_; }


void C_BOSS_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_BOSS_WORLD*>(&to_msg);
  auto& from = static_cast<const C_BOSS_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BOSS_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objkey().empty()) {
    _this->_internal_set_objkey(from._internal_objkey());
  }
  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  if (from._internal_ihp() != 0) {
    _this->_internal_set_ihp(from._internal_ihp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BOSS_WORLD::CopyFrom(const C_BOSS_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BOSS_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BOSS_WORLD::IsInitialized() const {
  return true;
}

void C_BOSS_WORLD::InternalSwap(C_BOSS_WORLD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objkey_, lhs_arena,
      &other->_impl_.objkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_BOSS_WORLD, _impl_.ihp_)
      + sizeof(C_BOSS_WORLD::_impl_.ihp_)
      - PROTOBUF_FIELD_OFFSET(C_BOSS_WORLD, _impl_.matworld_)>(
          reinterpret_cast<char*>(&_impl_.matworld_),
          reinterpret_cast<char*>(&other->_impl_.matworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BOSS_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[34]);
}

// ===================================================================

class S_BOSS_WORLD::_Internal {
 public:
  static const ::Protocol::Matrix& matworld(const S_BOSS_WORLD* msg);
};

const ::Protocol::Matrix&
S_BOSS_WORLD::_Internal::matworld(const S_BOSS_WORLD* msg) {
  return *msg->_impl_.matworld_;
}
void S_BOSS_WORLD::clear_matworld() {
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
}
S_BOSS_WORLD::S_BOSS_WORLD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BOSS_WORLD)
}
S_BOSS_WORLD::S_BOSS_WORLD(const S_BOSS_WORLD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_BOSS_WORLD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objkey_){}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.ihp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.objkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objkey().empty()) {
    _this->_impl_.objkey_.Set(from._internal_objkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_matworld()) {
    _this->_impl_.matworld_ = new ::Protocol::Matrix(*from._impl_.matworld_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ihp_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.ihp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BOSS_WORLD)
}

inline void S_BOSS_WORLD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objkey_){}
    , decltype(_impl_.matworld_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.ihp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.objkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.objkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_BOSS_WORLD::~S_BOSS_WORLD() {
  // @@protoc_insertion_point(destructor:Protocol.S_BOSS_WORLD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BOSS_WORLD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.objkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.matworld_;
}

void S_BOSS_WORLD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_BOSS_WORLD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BOSS_WORLD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objkey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.matworld_ != nullptr) {
    delete _impl_.matworld_;
  }
  _impl_.matworld_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ihp_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.ihp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BOSS_WORLD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string objKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_objkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_BOSS_WORLD.objKey"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Matrix matWorld = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_matworld(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 iHP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ihp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BOSS_WORLD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BOSS_WORLD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string objKey = 2;
  if (!this->_internal_objkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objkey().data(), static_cast<int>(this->_internal_objkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_BOSS_WORLD.objKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_objkey(), target);
  }

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::matworld(this),
        _Internal::matworld(this).GetCachedSize(), target, stream);
  }

  // uint32 iHP = 4;
  if (this->_internal_ihp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ihp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BOSS_WORLD)
  return target;
}

size_t S_BOSS_WORLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BOSS_WORLD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objKey = 2;
  if (!this->_internal_objkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objkey());
  }

  // .Protocol.Matrix matWorld = 3;
  if (this->_internal_has_matworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.matworld_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 iHP = 4;
  if (this->_internal_ihp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ihp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BOSS_WORLD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_BOSS_WORLD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BOSS_WORLD::GetClassData() const { return &_class_data_; }


void S_BOSS_WORLD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_BOSS_WORLD*>(&to_msg);
  auto& from = static_cast<const S_BOSS_WORLD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BOSS_WORLD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objkey().empty()) {
    _this->_internal_set_objkey(from._internal_objkey());
  }
  if (from._internal_has_matworld()) {
    _this->_internal_mutable_matworld()->::Protocol::Matrix::MergeFrom(
        from._internal_matworld());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_ihp() != 0) {
    _this->_internal_set_ihp(from._internal_ihp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BOSS_WORLD::CopyFrom(const S_BOSS_WORLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BOSS_WORLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BOSS_WORLD::IsInitialized() const {
  return true;
}

void S_BOSS_WORLD::InternalSwap(S_BOSS_WORLD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.objkey_, lhs_arena,
      &other->_impl_.objkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BOSS_WORLD, _impl_.ihp_)
      + sizeof(S_BOSS_WORLD::_impl_.ihp_)
      - PROTOBUF_FIELD_OFFSET(S_BOSS_WORLD, _impl_.matworld_)>(
          reinterpret_cast<char*>(&_impl_.matworld_),
          reinterpret_cast<char*>(&other->_impl_.matworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BOSS_WORLD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[35]);
}

// ===================================================================

class C_SATON_ATTACK::_Internal {
 public:
  static const ::Protocol::Vec3& targetpos(const C_SATON_ATTACK* msg);
};

const ::Protocol::Vec3&
C_SATON_ATTACK::_Internal::targetpos(const C_SATON_ATTACK* msg) {
  return *msg->_impl_.targetpos_;
}
void C_SATON_ATTACK::clear_targetpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
}
C_SATON_ATTACK::C_SATON_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SATON_ATTACK)
}
C_SATON_ATTACK::C_SATON_ATTACK(const C_SATON_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SATON_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.pattern_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetpos()) {
    _this->_impl_.targetpos_ = new ::Protocol::Vec3(*from._impl_.targetpos_);
  }
  _this->_impl_.pattern_ = from._impl_.pattern_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SATON_ATTACK)
}

inline void C_SATON_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.pattern_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SATON_ATTACK::~C_SATON_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_SATON_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SATON_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetpos_;
}

void C_SATON_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SATON_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SATON_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
  _impl_.pattern_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SATON_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.SatonPattern pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pattern(static_cast<::Protocol::SatonPattern>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 targetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SATON_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SATON_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.SatonPattern pattern = 1;
  if (this->_internal_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pattern(), target);
  }

  // .Protocol.Vec3 targetPos = 2;
  if (this->_internal_has_targetpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::targetpos(this),
        _Internal::targetpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SATON_ATTACK)
  return target;
}

size_t C_SATON_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SATON_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vec3 targetPos = 2;
  if (this->_internal_has_targetpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetpos_);
  }

  // .Protocol.SatonPattern pattern = 1;
  if (this->_internal_pattern() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SATON_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SATON_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SATON_ATTACK::GetClassData() const { return &_class_data_; }


void C_SATON_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SATON_ATTACK*>(&to_msg);
  auto& from = static_cast<const C_SATON_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SATON_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetpos()) {
    _this->_internal_mutable_targetpos()->::Protocol::Vec3::MergeFrom(
        from._internal_targetpos());
  }
  if (from._internal_pattern() != 0) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SATON_ATTACK::CopyFrom(const C_SATON_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SATON_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SATON_ATTACK::IsInitialized() const {
  return true;
}

void C_SATON_ATTACK::InternalSwap(C_SATON_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SATON_ATTACK, _impl_.pattern_)
      + sizeof(C_SATON_ATTACK::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(C_SATON_ATTACK, _impl_.targetpos_)>(
          reinterpret_cast<char*>(&_impl_.targetpos_),
          reinterpret_cast<char*>(&other->_impl_.targetpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SATON_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[36]);
}

// ===================================================================

class S_SATON_ATTACK::_Internal {
 public:
  static const ::Protocol::Vec3& targetpos(const S_SATON_ATTACK* msg);
  static const ::Protocol::Vec3& bosspos(const S_SATON_ATTACK* msg);
};

const ::Protocol::Vec3&
S_SATON_ATTACK::_Internal::targetpos(const S_SATON_ATTACK* msg) {
  return *msg->_impl_.targetpos_;
}
const ::Protocol::Vec3&
S_SATON_ATTACK::_Internal::bosspos(const S_SATON_ATTACK* msg) {
  return *msg->_impl_.bosspos_;
}
void S_SATON_ATTACK::clear_targetpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
}
void S_SATON_ATTACK::clear_bosspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
}
S_SATON_ATTACK::S_SATON_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SATON_ATTACK)
}
S_SATON_ATTACK::S_SATON_ATTACK(const S_SATON_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SATON_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.pattern_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetpos()) {
    _this->_impl_.targetpos_ = new ::Protocol::Vec3(*from._impl_.targetpos_);
  }
  if (from._internal_has_bosspos()) {
    _this->_impl_.bosspos_ = new ::Protocol::Vec3(*from._impl_.bosspos_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pattern_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.pattern_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SATON_ATTACK)
}

inline void S_SATON_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.pattern_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SATON_ATTACK::~S_SATON_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_SATON_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SATON_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetpos_;
  if (this != internal_default_instance()) delete _impl_.bosspos_;
}

void S_SATON_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SATON_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SATON_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pattern_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.pattern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SATON_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SatonPattern pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pattern(static_cast<::Protocol::SatonPattern>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 targetPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 BossPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bosspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SATON_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SATON_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.SatonPattern pattern = 2;
  if (this->_internal_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pattern(), target);
  }

  // .Protocol.Vec3 targetPos = 3;
  if (this->_internal_has_targetpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::targetpos(this),
        _Internal::targetpos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vec3 BossPos = 4;
  if (this->_internal_has_bosspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bosspos(this),
        _Internal::bosspos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SATON_ATTACK)
  return target;
}

size_t S_SATON_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SATON_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vec3 targetPos = 3;
  if (this->_internal_has_targetpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetpos_);
  }

  // .Protocol.Vec3 BossPos = 4;
  if (this->_internal_has_bosspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bosspos_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.SatonPattern pattern = 2;
  if (this->_internal_pattern() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SATON_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SATON_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SATON_ATTACK::GetClassData() const { return &_class_data_; }


void S_SATON_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SATON_ATTACK*>(&to_msg);
  auto& from = static_cast<const S_SATON_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SATON_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetpos()) {
    _this->_internal_mutable_targetpos()->::Protocol::Vec3::MergeFrom(
        from._internal_targetpos());
  }
  if (from._internal_has_bosspos()) {
    _this->_internal_mutable_bosspos()->::Protocol::Vec3::MergeFrom(
        from._internal_bosspos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_pattern() != 0) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SATON_ATTACK::CopyFrom(const S_SATON_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SATON_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SATON_ATTACK::IsInitialized() const {
  return true;
}

void S_SATON_ATTACK::InternalSwap(S_SATON_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SATON_ATTACK, _impl_.pattern_)
      + sizeof(S_SATON_ATTACK::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(S_SATON_ATTACK, _impl_.targetpos_)>(
          reinterpret_cast<char*>(&_impl_.targetpos_),
          reinterpret_cast<char*>(&other->_impl_.targetpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SATON_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[37]);
}

// ===================================================================

class C_KOUKU_ATTACK::_Internal {
 public:
  static const ::Protocol::Vec3& targetpos(const C_KOUKU_ATTACK* msg);
};

const ::Protocol::Vec3&
C_KOUKU_ATTACK::_Internal::targetpos(const C_KOUKU_ATTACK* msg) {
  return *msg->_impl_.targetpos_;
}
void C_KOUKU_ATTACK::clear_targetpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
}
C_KOUKU_ATTACK::C_KOUKU_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_KOUKU_ATTACK)
}
C_KOUKU_ATTACK::C_KOUKU_ATTACK(const C_KOUKU_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_KOUKU_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.pattern_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetpos()) {
    _this->_impl_.targetpos_ = new ::Protocol::Vec3(*from._impl_.targetpos_);
  }
  _this->_impl_.pattern_ = from._impl_.pattern_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_KOUKU_ATTACK)
}

inline void C_KOUKU_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.pattern_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_KOUKU_ATTACK::~C_KOUKU_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_KOUKU_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_KOUKU_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetpos_;
}

void C_KOUKU_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_KOUKU_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_KOUKU_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
  _impl_.pattern_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_KOUKU_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.KoukuPattern pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pattern(static_cast<::Protocol::KoukuPattern>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 targetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_KOUKU_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_KOUKU_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.KoukuPattern pattern = 1;
  if (this->_internal_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pattern(), target);
  }

  // .Protocol.Vec3 targetPos = 2;
  if (this->_internal_has_targetpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::targetpos(this),
        _Internal::targetpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_KOUKU_ATTACK)
  return target;
}

size_t C_KOUKU_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_KOUKU_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vec3 targetPos = 2;
  if (this->_internal_has_targetpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetpos_);
  }

  // .Protocol.KoukuPattern pattern = 1;
  if (this->_internal_pattern() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_KOUKU_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_KOUKU_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_KOUKU_ATTACK::GetClassData() const { return &_class_data_; }


void C_KOUKU_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_KOUKU_ATTACK*>(&to_msg);
  auto& from = static_cast<const C_KOUKU_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_KOUKU_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetpos()) {
    _this->_internal_mutable_targetpos()->::Protocol::Vec3::MergeFrom(
        from._internal_targetpos());
  }
  if (from._internal_pattern() != 0) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_KOUKU_ATTACK::CopyFrom(const C_KOUKU_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_KOUKU_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_KOUKU_ATTACK::IsInitialized() const {
  return true;
}

void C_KOUKU_ATTACK::InternalSwap(C_KOUKU_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_KOUKU_ATTACK, _impl_.pattern_)
      + sizeof(C_KOUKU_ATTACK::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(C_KOUKU_ATTACK, _impl_.targetpos_)>(
          reinterpret_cast<char*>(&_impl_.targetpos_),
          reinterpret_cast<char*>(&other->_impl_.targetpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_KOUKU_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[38]);
}

// ===================================================================

class S_KOUKU_ATTACK::_Internal {
 public:
  static const ::Protocol::Vec3& targetpos(const S_KOUKU_ATTACK* msg);
};

const ::Protocol::Vec3&
S_KOUKU_ATTACK::_Internal::targetpos(const S_KOUKU_ATTACK* msg) {
  return *msg->_impl_.targetpos_;
}
void S_KOUKU_ATTACK::clear_targetpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
}
S_KOUKU_ATTACK::S_KOUKU_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_KOUKU_ATTACK)
}
S_KOUKU_ATTACK::S_KOUKU_ATTACK(const S_KOUKU_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_KOUKU_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.pattern_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetpos()) {
    _this->_impl_.targetpos_ = new ::Protocol::Vec3(*from._impl_.targetpos_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pattern_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.pattern_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_KOUKU_ATTACK)
}

inline void S_KOUKU_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.pattern_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_KOUKU_ATTACK::~S_KOUKU_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_KOUKU_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_KOUKU_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetpos_;
}

void S_KOUKU_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_KOUKU_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_KOUKU_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetpos_ != nullptr) {
    delete _impl_.targetpos_;
  }
  _impl_.targetpos_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pattern_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.pattern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_KOUKU_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.KoukuPattern pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pattern(static_cast<::Protocol::KoukuPattern>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vec3 targetPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_KOUKU_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_KOUKU_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.KoukuPattern pattern = 2;
  if (this->_internal_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pattern(), target);
  }

  // .Protocol.Vec3 targetPos = 3;
  if (this->_internal_has_targetpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::targetpos(this),
        _Internal::targetpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_KOUKU_ATTACK)
  return target;
}

size_t S_KOUKU_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_KOUKU_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vec3 targetPos = 3;
  if (this->_internal_has_targetpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetpos_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.KoukuPattern pattern = 2;
  if (this->_internal_pattern() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_KOUKU_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_KOUKU_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_KOUKU_ATTACK::GetClassData() const { return &_class_data_; }


void S_KOUKU_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_KOUKU_ATTACK*>(&to_msg);
  auto& from = static_cast<const S_KOUKU_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_KOUKU_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetpos()) {
    _this->_internal_mutable_targetpos()->::Protocol::Vec3::MergeFrom(
        from._internal_targetpos());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_pattern() != 0) {
    _this->_internal_set_pattern(from._internal_pattern());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_KOUKU_ATTACK::CopyFrom(const S_KOUKU_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_KOUKU_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_KOUKU_ATTACK::IsInitialized() const {
  return true;
}

void S_KOUKU_ATTACK::InternalSwap(S_KOUKU_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_KOUKU_ATTACK, _impl_.pattern_)
      + sizeof(S_KOUKU_ATTACK::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(S_KOUKU_ATTACK, _impl_.targetpos_)>(
          reinterpret_cast<char*>(&_impl_.targetpos_),
          reinterpret_cast<char*>(&other->_impl_.targetpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_KOUKU_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[39]);
}

// ===================================================================

class C_KOUKU_COUNTER::_Internal {
 public:
  static const ::Protocol::Player& player(const C_KOUKU_COUNTER* msg);
};

const ::Protocol::Player&
C_KOUKU_COUNTER::_Internal::player(const C_KOUKU_COUNTER* msg) {
  return *msg->_impl_.player_;
}
void C_KOUKU_COUNTER::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_KOUKU_COUNTER::C_KOUKU_COUNTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_KOUKU_COUNTER)
}
C_KOUKU_COUNTER::C_KOUKU_COUNTER(const C_KOUKU_COUNTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_KOUKU_COUNTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_KOUKU_COUNTER)
}

inline void C_KOUKU_COUNTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_KOUKU_COUNTER::~C_KOUKU_COUNTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_KOUKU_COUNTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_KOUKU_COUNTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_KOUKU_COUNTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_KOUKU_COUNTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_KOUKU_COUNTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_KOUKU_COUNTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_KOUKU_COUNTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_KOUKU_COUNTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_KOUKU_COUNTER)
  return target;
}

size_t C_KOUKU_COUNTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_KOUKU_COUNTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_KOUKU_COUNTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_KOUKU_COUNTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_KOUKU_COUNTER::GetClassData() const { return &_class_data_; }


void C_KOUKU_COUNTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_KOUKU_COUNTER*>(&to_msg);
  auto& from = static_cast<const C_KOUKU_COUNTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_KOUKU_COUNTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_KOUKU_COUNTER::CopyFrom(const C_KOUKU_COUNTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_KOUKU_COUNTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_KOUKU_COUNTER::IsInitialized() const {
  return true;
}

void C_KOUKU_COUNTER::InternalSwap(C_KOUKU_COUNTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_KOUKU_COUNTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[40]);
}

// ===================================================================

class S_KOUKU_COUNTER::_Internal {
 public:
};

S_KOUKU_COUNTER::S_KOUKU_COUNTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_KOUKU_COUNTER)
}
S_KOUKU_COUNTER::S_KOUKU_COUNTER(const S_KOUKU_COUNTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_KOUKU_COUNTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_KOUKU_COUNTER)
}

inline void S_KOUKU_COUNTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_KOUKU_COUNTER::~S_KOUKU_COUNTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_KOUKU_COUNTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_KOUKU_COUNTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_KOUKU_COUNTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_KOUKU_COUNTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_KOUKU_COUNTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_KOUKU_COUNTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_KOUKU_COUNTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_KOUKU_COUNTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_KOUKU_COUNTER)
  return target;
}

size_t S_KOUKU_COUNTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_KOUKU_COUNTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_KOUKU_COUNTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_KOUKU_COUNTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_KOUKU_COUNTER::GetClassData() const { return &_class_data_; }


void S_KOUKU_COUNTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_KOUKU_COUNTER*>(&to_msg);
  auto& from = static_cast<const S_KOUKU_COUNTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_KOUKU_COUNTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_KOUKU_COUNTER::CopyFrom(const S_KOUKU_COUNTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_KOUKU_COUNTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_KOUKU_COUNTER::IsInitialized() const {
  return true;
}

void S_KOUKU_COUNTER::InternalSwap(S_KOUKU_COUNTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_KOUKU_COUNTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[41]);
}

// ===================================================================

class C_DEBUG_PKT::_Internal {
 public:
};

C_DEBUG_PKT::C_DEBUG_PKT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DEBUG_PKT)
}
C_DEBUG_PKT::C_DEBUG_PKT(const C_DEBUG_PKT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_DEBUG_PKT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debuglog_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.debuglog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debuglog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_debuglog().empty()) {
    _this->_impl_.debuglog_.Set(from._internal_debuglog(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DEBUG_PKT)
}

inline void C_DEBUG_PKT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debuglog_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.debuglog_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debuglog_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_DEBUG_PKT::~C_DEBUG_PKT() {
  // @@protoc_insertion_point(destructor:Protocol.C_DEBUG_PKT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DEBUG_PKT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debuglog_.Destroy();
}

void C_DEBUG_PKT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_DEBUG_PKT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DEBUG_PKT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debuglog_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DEBUG_PKT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string debugLog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_debuglog();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_DEBUG_PKT.debugLog"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DEBUG_PKT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DEBUG_PKT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string debugLog = 1;
  if (!this->_internal_debuglog().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_debuglog().data(), static_cast<int>(this->_internal_debuglog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_DEBUG_PKT.debugLog");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_debuglog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DEBUG_PKT)
  return target;
}

size_t C_DEBUG_PKT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DEBUG_PKT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string debugLog = 1;
  if (!this->_internal_debuglog().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_debuglog());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DEBUG_PKT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_DEBUG_PKT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DEBUG_PKT::GetClassData() const { return &_class_data_; }


void C_DEBUG_PKT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_DEBUG_PKT*>(&to_msg);
  auto& from = static_cast<const C_DEBUG_PKT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DEBUG_PKT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_debuglog().empty()) {
    _this->_internal_set_debuglog(from._internal_debuglog());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DEBUG_PKT::CopyFrom(const C_DEBUG_PKT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DEBUG_PKT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DEBUG_PKT::IsInitialized() const {
  return true;
}

void C_DEBUG_PKT::InternalSwap(C_DEBUG_PKT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debuglog_, lhs_arena,
      &other->_impl_.debuglog_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DEBUG_PKT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[42]);
}

// ===================================================================

class C_KOUKU_DAMAGE::_Internal {
 public:
  static const ::Protocol::Player& player(const C_KOUKU_DAMAGE* msg);
};

const ::Protocol::Player&
C_KOUKU_DAMAGE::_Internal::player(const C_KOUKU_DAMAGE* msg) {
  return *msg->_impl_.player_;
}
void C_KOUKU_DAMAGE::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
C_KOUKU_DAMAGE::C_KOUKU_DAMAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_KOUKU_DAMAGE)
}
C_KOUKU_DAMAGE::C_KOUKU_DAMAGE(const C_KOUKU_DAMAGE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_KOUKU_DAMAGE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::Player(*from._impl_.player_);
  }
  _this->_impl_.damage_ = from._impl_.damage_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_KOUKU_DAMAGE)
}

inline void C_KOUKU_DAMAGE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_KOUKU_DAMAGE::~C_KOUKU_DAMAGE() {
  // @@protoc_insertion_point(destructor:Protocol.C_KOUKU_DAMAGE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_KOUKU_DAMAGE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void C_KOUKU_DAMAGE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_KOUKU_DAMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_KOUKU_DAMAGE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.damage_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_KOUKU_DAMAGE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_KOUKU_DAMAGE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_KOUKU_DAMAGE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_KOUKU_DAMAGE)
  return target;
}

size_t C_KOUKU_DAMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_KOUKU_DAMAGE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_KOUKU_DAMAGE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_KOUKU_DAMAGE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_KOUKU_DAMAGE::GetClassData() const { return &_class_data_; }


void C_KOUKU_DAMAGE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_KOUKU_DAMAGE*>(&to_msg);
  auto& from = static_cast<const C_KOUKU_DAMAGE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_KOUKU_DAMAGE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_KOUKU_DAMAGE::CopyFrom(const C_KOUKU_DAMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_KOUKU_DAMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_KOUKU_DAMAGE::IsInitialized() const {
  return true;
}

void C_KOUKU_DAMAGE::InternalSwap(C_KOUKU_DAMAGE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_KOUKU_DAMAGE, _impl_.damage_)
      + sizeof(C_KOUKU_DAMAGE::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(C_KOUKU_DAMAGE, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_KOUKU_DAMAGE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[43]);
}

// ===================================================================

class C_KOUKU_RESULT::_Internal {
 public:
};

C_KOUKU_RESULT::C_KOUKU_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_KOUKU_RESULT)
}
C_KOUKU_RESULT::C_KOUKU_RESULT(const C_KOUKU_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_KOUKU_RESULT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_KOUKU_RESULT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_KOUKU_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_KOUKU_RESULT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_KOUKU_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[44]);
}

// ===================================================================

class S_KOUKU_RESULT::_Internal {
 public:
};

void S_KOUKU_RESULT::clear_result() {
  _impl_.result_.Clear();
}
S_KOUKU_RESULT::S_KOUKU_RESULT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_KOUKU_RESULT)
}
S_KOUKU_RESULT::S_KOUKU_RESULT(const S_KOUKU_RESULT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_KOUKU_RESULT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_KOUKU_RESULT)
}

inline void S_KOUKU_RESULT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_KOUKU_RESULT::~S_KOUKU_RESULT() {
  // @@protoc_insertion_point(destructor:Protocol.S_KOUKU_RESULT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_KOUKU_RESULT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
}

void S_KOUKU_RESULT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_KOUKU_RESULT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_KOUKU_RESULT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_KOUKU_RESULT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PlayerResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_KOUKU_RESULT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_KOUKU_RESULT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .Protocol.PlayerResult result = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_KOUKU_RESULT)
  return target;
}

size_t S_KOUKU_RESULT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_KOUKU_RESULT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_KOUKU_RESULT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_KOUKU_RESULT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_KOUKU_RESULT::GetClassData() const { return &_class_data_; }


void S_KOUKU_RESULT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_KOUKU_RESULT*>(&to_msg);
  auto& from = static_cast<const S_KOUKU_RESULT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_KOUKU_RESULT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_KOUKU_RESULT::CopyFrom(const S_KOUKU_RESULT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_KOUKU_RESULT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_KOUKU_RESULT::IsInitialized() const {
  return true;
}

void S_KOUKU_RESULT::InternalSwap(S_KOUKU_RESULT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_KOUKU_RESULT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[45]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OTHER_PLAYER*
Arena::CreateMaybeMessage< ::Protocol::S_OTHER_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OTHER_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_INPUT*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_INPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_INPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_INPUT*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_INPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_INPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_WORLD*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_WORLD*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_YAW_ACTION*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_YAW_ACTION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_YAW_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_YAW_ACTION*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_YAW_ACTION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_YAW_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_ACTION*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ACTION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_ACTION*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ACTION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ACTION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_ARROW*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_ARROW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_ARROW >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_ARROW*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_ARROW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_ARROW >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_EQUIP*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_EQUIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_EQUIP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_EQUIP*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_EQUIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_EQUIP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ALL_PLAYER_ENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ALL_PLAYER_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ALL_PLAYER_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_DEAD*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_DEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_DEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_DEAD*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_DEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_DEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_RESPANW*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_RESPANW >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_RESPANW >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_RESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_RESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_RESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_MOVE_STAGE*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_MOVE_STAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_MOVE_STAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_MOVE_STAGE*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_MOVE_STAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_MOVE_STAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PLAYER_MOVE_STAGE_FINISH*
Arena::CreateMaybeMessage< ::Protocol::C_PLAYER_MOVE_STAGE_FINISH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PLAYER_MOVE_STAGE_FINISH >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYER_MOVE_STAGE_FINISH*
Arena::CreateMaybeMessage< ::Protocol::S_PLAYER_MOVE_STAGE_FINISH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYER_MOVE_STAGE_FINISH >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SPAWN_MONSTER*
Arena::CreateMaybeMessage< ::Protocol::C_SPAWN_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SPAWN_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN_MONSTER*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MONSTER_SET_TARGET*
Arena::CreateMaybeMessage< ::Protocol::C_MONSTER_SET_TARGET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MONSTER_SET_TARGET >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MONSTER_SET_TARGET*
Arena::CreateMaybeMessage< ::Protocol::S_MONSTER_SET_TARGET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MONSTER_SET_TARGET >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MONSTER_WORLD*
Arena::CreateMaybeMessage< ::Protocol::C_MONSTER_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MONSTER_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MONSTER_WORLD*
Arena::CreateMaybeMessage< ::Protocol::S_MONSTER_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MONSTER_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BOSS_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::C_BOSS_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BOSS_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BOSS_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_BOSS_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BOSS_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BOSS_WORLD*
Arena::CreateMaybeMessage< ::Protocol::C_BOSS_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BOSS_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BOSS_WORLD*
Arena::CreateMaybeMessage< ::Protocol::S_BOSS_WORLD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BOSS_WORLD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SATON_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::C_SATON_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SATON_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SATON_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::S_SATON_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SATON_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_KOUKU_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::C_KOUKU_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_KOUKU_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_KOUKU_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::S_KOUKU_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_KOUKU_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_KOUKU_COUNTER*
Arena::CreateMaybeMessage< ::Protocol::C_KOUKU_COUNTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_KOUKU_COUNTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_KOUKU_COUNTER*
Arena::CreateMaybeMessage< ::Protocol::S_KOUKU_COUNTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_KOUKU_COUNTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DEBUG_PKT*
Arena::CreateMaybeMessage< ::Protocol::C_DEBUG_PKT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DEBUG_PKT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_KOUKU_DAMAGE*
Arena::CreateMaybeMessage< ::Protocol::C_KOUKU_DAMAGE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_KOUKU_DAMAGE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_KOUKU_RESULT*
Arena::CreateMaybeMessage< ::Protocol::C_KOUKU_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_KOUKU_RESULT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_KOUKU_RESULT*
Arena::CreateMaybeMessage< ::Protocol::S_KOUKU_RESULT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_KOUKU_RESULT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
